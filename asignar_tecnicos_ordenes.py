"""Script para asignar t√©cnicos a las √≥rdenes de trabajo que no tienen asignaci√≥n"""

from app.models.orden_trabajo import OrdenTrabajo
from app.models.usuario import Usuario
from app.extensions import db
from app import create_app

# Crear contexto de aplicaci√≥n
app = create_app()
app.app_context().push()

# Buscar un t√©cnico
tecnico = Usuario.query.filter_by(rol="T√©cnico").first()

if not tecnico:
    print("‚ùå No se encontr√≥ ning√∫n t√©cnico en la base de datos")
    exit(1)

print(f"‚úÖ T√©cnico encontrado: {tecnico.nombre} (ID: {tecnico.id})")

# Buscar √≥rdenes sin t√©cnico asignado
ordenes_sin_tecnico = OrdenTrabajo.query.filter_by(tecnico_id=None).all()

print(f"üìã Encontradas {len(ordenes_sin_tecnico)} √≥rdenes sin t√©cnico asignado")

if len(ordenes_sin_tecnico) == 0:
    print("‚úÖ Todas las √≥rdenes ya tienen t√©cnico asignado")
    exit(0)

# Asignar el t√©cnico a todas las √≥rdenes
for orden in ordenes_sin_tecnico:
    orden.tecnico_id = tecnico.id
    print(f"  - Orden #{orden.id} ({orden.numero_orden}): Asignado a {tecnico.nombre}")

# Guardar cambios
db.session.commit()

print(f"\n‚úÖ {len(ordenes_sin_tecnico)} √≥rdenes actualizadas exitosamente")

# Verificar los cambios
ordenes_actualizadas = OrdenTrabajo.query.filter_by(tecnico_id=tecnico.id).all()
print(
    f"üîç Verificaci√≥n: {len(ordenes_actualizadas)} √≥rdenes ahora asignadas a {tecnico.nombre}"
)
