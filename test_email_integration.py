#!/usr/bin/env python3
"""
Prueba de integraci√≥n de emails en solicitudes de servicio
"""
import os
import sys

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def test_email_integration():
    """Prueba la integraci√≥n de emails con el modelo de solicitud"""
    try:
        from app.utils.email_utils import (
            enviar_email_confirmacion,
            enviar_email_notificacion_admin,
        )
        from app.models.solicitud_servicio import SolicitudServicio
        from datetime import datetime

        print("‚úÖ M√≥dulos importados correctamente")

        # Crear una solicitud de prueba (sin guardar en BD)
        solicitud = SolicitudServicio(
            numero_solicitud="TEST-001",
            nombre_solicitante="Usuario de Prueba",
            email_solicitante="test@example.com",
            telefono_solicitante="123456789",
            empresa_solicitante="Empresa Test",
            tipo_servicio="mantenimiento",
            prioridad="normal",
            titulo="Prueba de email",
            descripcion="Esta es una solicitud de prueba para verificar el env√≠o de emails",
            ubicacion="Oficina Central",
            activo_afectado="Computadora #1",
        )

        # Simular fecha de creaci√≥n
        solicitud.fecha_creacion = datetime.now()

        print("‚úÖ Solicitud de prueba creada")
        print(f"   N√∫mero: {solicitud.numero_solicitud}")
        print(f"   Solicitante: {solicitud.nombre_solicitante}")
        print(f"   Email: {solicitud.email_solicitante}")

        # Verificar que los m√©todos existen
        assert hasattr(solicitud, "numero_solicitud"), "Falta atributo numero_solicitud"
        assert hasattr(
            solicitud, "nombre_solicitante"
        ), "Falta atributo nombre_solicitante"
        assert hasattr(
            solicitud, "email_solicitante"
        ), "Falta atributo email_solicitante"

        print("‚úÖ Atributos de solicitud verificados")

        # Verificar que las funciones de email existen
        assert callable(
            enviar_email_confirmacion
        ), "Funci√≥n enviar_email_confirmacion no es callable"
        assert callable(
            enviar_email_notificacion_admin
        ), "Funci√≥n enviar_email_notificacion_admin no es callable"

        print("‚úÖ Funciones de email verificadas")

        print("\nüéâ ¬°Integraci√≥n de emails funcionando correctamente!")
        print("Las funciones est√°n listas para enviar emails autom√°ticos.")
        print("\nPara probar el env√≠o real:")
        print("1. Crea una solicitud real desde la interfaz web")
        print("2. Verifica que se env√≠en los emails de confirmaci√≥n")
        print("3. Revisa los logs del servidor para mensajes de error")

        return True

    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False


if __name__ == "__main__":
    success = test_email_integration()
    sys.exit(0 if success else 1)
