#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
An√°lisis espec√≠fico del problema de frecuencia del plan PM-2025-0001
"""

from datetime import datetime, timedelta
import ast


def analizar_problema():
    print("üîç AN√ÅLISIS DEL PROBLEMA PM-2025-0001")
    print("=" * 50)

    # Datos del plan desde la BD
    datos_plan = {
        "codigo": "PM-2025-0001",
        "nombre": "Horno",
        "dias_semana": "['lunes', 'miercoles', 'viernes']",
        "proxima_ejecucion": "2025-10-05 13:17:47.838323",
        "tipo_frecuencia": "semanal",
        "generacion_automatica": 0,
    }

    print(f"Plan: {datos_plan['codigo']} - {datos_plan['nombre']}")
    print(f"D√≠as configurados: {datos_plan['dias_semana']}")
    print(f"Pr√≥xima ejecuci√≥n BD: {datos_plan['proxima_ejecucion']}")
    print(
        f"Generaci√≥n autom√°tica: {datos_plan['generacion_automatica']} (‚ùå DESHABILITADA)"
    )

    # Parsear d√≠as de la semana
    try:
        dias_lista = ast.literal_eval(datos_plan["dias_semana"])
        print(f"D√≠as parseados: {dias_lista}")
    except Exception as e:
        print(f"Error parseando d√≠as: {e}")
        return

    # Mapear d√≠as a n√∫meros
    mapeo_dias = {
        "lunes": 0,
        "martes": 1,
        "mi√©rcoles": 2,
        "miercoles": 2,
        "jueves": 3,
        "viernes": 4,
        "s√°bado": 5,
        "domingo": 6,
    }

    dias_numericos = []
    for dia in dias_lista:
        dia_lower = dia.lower().strip()
        if dia_lower in mapeo_dias:
            dias_numericos.append(mapeo_dias[dia_lower])
        else:
            print(f"‚ö†Ô∏è  D√≠a no reconocido: '{dia}'")

    dias_numericos.sort()
    print(f"D√≠as num√©ricos: {dias_numericos} (0=Lunes, 4=Viernes)")

    # Nombres de d√≠as para mostrar
    nombres_dias = [
        "Lunes",
        "Martes",
        "Mi√©rcoles",
        "Jueves",
        "Viernes",
        "S√°bado",
        "Domingo",
    ]
    dias_nombres = [nombres_dias[d] for d in dias_numericos]
    print(f"D√≠as objetivo: {', '.join(dias_nombres)}")

    # Analizar fecha actual en BD
    try:
        fecha_bd = datetime.strptime(
            datos_plan["proxima_ejecucion"][:19], "%Y-%m-%d %H:%M:%S"
        )
        print(f"\nüìÖ FECHA PROBLEM√ÅTICA EN BD:")
        print(f"Fecha: {fecha_bd.strftime('%A %d/%m/%Y %H:%M')}")
        print(f"D√≠a semana: {fecha_bd.weekday()} ({nombres_dias[fecha_bd.weekday()]})")

        # Verificar si el d√≠a est√° en la lista objetivo
        if fecha_bd.weekday() in dias_numericos:
            print(
                f"‚úÖ El d√≠a {nombres_dias[fecha_bd.weekday()]} S√ç est√° en los d√≠as objetivo"
            )
        else:
            print(
                f"‚ùå El d√≠a {nombres_dias[fecha_bd.weekday()]} NO est√° en los d√≠as objetivo"
            )

    except Exception as e:
        print(f"Error parseando fecha BD: {e}")
        return

    # Calcular qu√© deber√≠a ser la pr√≥xima fecha
    print(f"\nüßÆ C√ÅLCULO CORRECTO DESDE HOY:")
    hoy = datetime.now().replace(hour=6, minute=0, second=0, microsecond=0)
    print(f"Hoy: {hoy.strftime('%A %d/%m/%Y %H:%M')} (d√≠a {hoy.weekday()})")

    proxima_correcta = calcular_proxima_ejecucion(hoy, dias_numericos)
    print(
        f"Pr√≥xima correcta: {proxima_correcta.strftime('%A %d/%m/%Y %H:%M')} (d√≠a {proxima_correcta.weekday()})"
    )

    # Comparar fechas
    print(f"\nüîç COMPARACI√ìN:")
    print(f"BD dice:      {fecha_bd.strftime('%A %d/%m/%Y')} ({fecha_bd.weekday()})")
    print(
        f"Deber√≠a ser:  {proxima_correcta.strftime('%A %d/%m/%Y')} ({proxima_correcta.weekday()})"
    )

    diferencia_dias = (fecha_bd.date() - proxima_correcta.date()).days
    if diferencia_dias == 0:
        print(f"‚úÖ Las fechas COINCIDEN")
    else:
        print(f"‚ùå DISCREPANCIA: {abs(diferencia_dias)} d√≠as de diferencia")
        if diferencia_dias > 0:
            print(f"   BD est√° {diferencia_dias} d√≠as ADELANTE")
        else:
            print(f"   BD est√° {abs(diferencia_dias)} d√≠as ATR√ÅS")

    # Teor√≠as sobre el problema
    print(f"\nüí° POSIBLES CAUSAS:")
    print(
        f"1. ‚ùå Generaci√≥n autom√°tica DESHABILITADA (valor: {datos_plan['generacion_automatica']})"
    )
    print(f"2. üîÑ El c√°lculo se hizo desde una fecha base incorrecta")
    print(f"3. üêõ Bug en la l√≥gica de c√°lculo semanal")
    print(f"4. üìÖ La fecha se calcul√≥ manualmente y no se actualiz√≥")


def calcular_proxima_ejecucion(fecha_base, dias_objetivo):
    """
    Calcula la pr√≥xima ejecuci√≥n para d√≠as espec√≠ficos de la semana
    """
    dias_ordenados = sorted(dias_objetivo)
    dia_actual = fecha_base.weekday()

    # Buscar siguiente d√≠a en la semana actual
    for dia in dias_ordenados:
        if dia > dia_actual:
            diferencia = dia - dia_actual
            return fecha_base + timedelta(days=diferencia)

    # Si no hay m√°s d√≠as esta semana, ir a la pr√≥xima semana
    primer_dia_proxima = dias_ordenados[0]
    dias_hasta_lunes = 7 - dia_actual  # D√≠as hasta el lunes pr√≥ximo
    dias_desde_lunes = primer_dia_proxima  # D√≠as desde lunes hasta objetivo

    total_dias = dias_hasta_lunes + dias_desde_lunes
    return fecha_base + timedelta(days=total_dias)


if __name__ == "__main__":
    analizar_problema()
