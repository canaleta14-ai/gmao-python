#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.factory import create_app
from app.extensions import db
from app.models.usuario import Usuario

def prepare_production_database():
    """Preparar base de datos limpia para producci√≥n con usuario administrador"""
    app = create_app()
    
    with app.app_context():
        print("=== PREPARACI√ìN DE BASE DE DATOS PARA PRODUCCI√ìN ===\n")
        
        # 1. Limpiar completamente la base de datos
        print("üßπ Limpiando base de datos...")
        try:
            # Eliminar todas las tablas y recrearlas
            db.drop_all()
            db.create_all()
            print("   ‚úÖ Base de datos limpiada y recreada")
        except Exception as e:
            print(f"   ‚ùå Error limpiando base de datos: {e}")
            return False
        
        # 2. Crear usuario administrador para producci√≥n
        print("\nüë§ Creando usuario administrador para producci√≥n...")
        try:
            # Verificar si ya existe un admin
            admin_existente = Usuario.query.filter_by(username='admin').first()
            
            if admin_existente:
                print(f"   ‚ö†Ô∏è Usuario administrador ya existe: {admin_existente.username}")
            else:
                # Crear nuevo usuario administrador
                admin_user = Usuario(
                    username='admin',
                    email='admin@gmao.com',
                    nombre='Administrador Sistema',
                    rol='Administrador',
                    activo=True
                )
                admin_user.set_password('admin123')  # Cambiar en producci√≥n
                
                db.session.add(admin_user)
                db.session.commit()
                
                print(f"   ‚úÖ Usuario administrador creado:")
                print(f"      - Username: {admin_user.username}")
                print(f"      - Email: {admin_user.email}")
                print(f"      - Rol: {admin_user.rol}")
                print(f"      - Password: admin123 (CAMBIAR EN PRODUCCI√ìN)")
        
        except Exception as e:
            print(f"   ‚ùå Error creando usuario administrador: {e}")
            db.session.rollback()
            return False
        
        # 3. Verificar estado final
        print("\nüìä Estado final de la base de datos:")
        usuarios_count = Usuario.query.count()
        print(f"   - Usuarios: {usuarios_count}")
        
        if usuarios_count == 1:
            admin = Usuario.query.first()
            print(f"   - Admin: {admin.username} ({admin.email})")
        
        print("\n‚úÖ Base de datos preparada para producci√≥n.")
        print("\n‚ö†Ô∏è  IMPORTANTE:")
        print("   1. Cambiar la contrase√±a del administrador en producci√≥n")
        print("   2. Configurar variables de entorno de producci√≥n")
        print("   3. Verificar configuraci√≥n de seguridad")
        
        return True

if __name__ == "__main__":
    try:
        success = prepare_production_database()
        if success:
            print("\nüéâ Preparaci√≥n completada exitosamente.")
        else:
            print("\n‚ùå Error en la preparaci√≥n.")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error preparando base de datos para producci√≥n: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)