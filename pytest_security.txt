============================= test session starts =============================
platform win32 -- Python 3.11.6, pytest-8.3.3, pluggy-1.6.0
rootdir: C:\gmao - copia
configfile: pytest.ini
plugins: anyio-4.11.0, langsmith-0.4.31, cov-5.0.0, flask-1.3.0, mock-3.14.0
collected 12 items

tests\test_security.py EEEEEEEEEEEE                                      [100%]

=================================== ERRORS ====================================
_______________ ERROR at setup of test_csrf_protection_enabled ________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
---------------------------- Captured stdout setup ----------------------------
[OK] Blueprint de estadÝsticas disponible
----------------------------- Captured log setup ------------------------------
WARNING  app.utils.secrets:secrets.py:134 Usando valor por defecto para 'SECRET_KEY' (ni Secret Manager ni .env disponibles)\nWARNING  app.factory:factory.py:46 \u26a0\ufe0f  Usando SECRET_KEY por defecto - NO USAR EN PRODUCCI\xd3N
_________ ERROR at setup of test_session_cookie_secure_in_production __________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
________ ERROR at setup of test_session_cookie_insecure_in_development ________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
________________ ERROR at setup of test_secret_key_not_default ________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
_______________ ERROR at setup of test_rate_limiting_configured _______________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
_________________ ERROR at setup of test_login_rate_limiting __________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
_______________ ERROR at setup of test_sql_injection_protection _______________
file C:\gmao - copia\tests\test_security.py, line 127
  @pytest.mark.security
  def test_sql_injection_protection(authenticated_client):
E       fixture 'authenticated_client' not found
>       available fixtures: _configure_application, _monkeypatch_response_class, _push_request_context, accept_any, accept_json, accept_jsonp, accept_mimetype, activo_test, anyio_backend, anyio_backend_name, anyio_backend_options, app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, client_class, config, cov, db_session, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, live_server, mocker, module_mocker, monkeypatch, no_cover, orden_trabajo_test, package_mocker, plan_mantenimiento_test, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, usuario_admin, usuario_tecnico
>       use 'pytest --fixtures [testpath]' for help on them.

C:\gmao - copia\tests\test_security.py:127
____________________ ERROR at setup of test_xss_protection ____________________
file C:\gmao - copia\tests\test_security.py, line 160
  @pytest.mark.security
  def test_xss_protection(authenticated_client):
E       fixture 'authenticated_client' not found
>       available fixtures: _configure_application, _monkeypatch_response_class, _push_request_context, accept_any, accept_json, accept_jsonp, accept_mimetype, activo_test, anyio_backend, anyio_backend_name, anyio_backend_options, app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, client_class, config, cov, db_session, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, live_server, mocker, module_mocker, monkeypatch, no_cover, orden_trabajo_test, package_mocker, plan_mantenimiento_test, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, usuario_admin, usuario_tecnico
>       use 'pytest --fixtures [testpath]' for help on them.

C:\gmao - copia\tests\test_security.py:160
_____________ ERROR at setup of test_unauthorized_access_blocked ______________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
___________________ ERROR at setup of test_password_hashing ___________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
______________ ERROR at setup of test_no_sensitive_data_in_logs _______________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError
___________________ ERROR at setup of test_headers_security ___________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023102659A90>
engine = Engine(postgresql://gmao-user:***@130.211.68.78:5432/gmao)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="session")
    def app():
        """Crea la aplicaci¾n Flask para testing"""
        app = create_app()
    
        # Configuraci¾n para testing
        app.config.update(
            {
                "TESTING": True,
                "SQLALCHEMY_DATABASE_URI": "sqlite:///:memory:",
                "WTF_CSRF_ENABLED": False,
                "SECRET_KEY": "test-secret-key",
                "FLASK_ENV": "development",  # Cambiado de "testing" a "development" para cron
                "SERVER_URL": "http://localhost:5000",
            }
        )
    
        # Crear todas las tablas
        with app.app_context():
>           db.create_all()

tests\conftest.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:900: in create_all
    self._call_for_binds(bind_key, "create_all")
.venv\Lib\site-packages\flask_sqlalchemy\extension.py:881: in _call_for_binds
    getattr(metadata, op_name)(bind=engine)
.venv\Lib\site-packages\sqlalchemy\sql\schema.py:5924: in create_all
    bind._run_ddl_visitor(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3251: in _run_ddl_visitor
    with self.begin() as conn:
C:\Users\canal\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3241: in begin
    with self.connect() as conn:
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3277: in connect
    return self._connection_cls(self)
.venv\Lib\site-packages\sqlalchemy\engine\base.py:145: in __init__
    Connection._handle_dbapi_exception_noconnection(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:2440: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv\Lib\site-packages\sqlalchemy\engine\base.py:143: in __init__
    self._dbapi_connection = engine.raw_connection()
.venv\Lib\site-packages\sqlalchemy\engine\base.py:3301: in raw_connection
    return self.pool.connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:447: in connect
    return _ConnectionFairy._checkout(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:1264: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:711: in checkout
    rec = pool._do_get()
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:177: in _do_get
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\impl.py:175: in _do_get
    return self._create_connection()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:388: in _create_connection
    return _ConnectionRecord(self)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:673: in __init__
    self.__connect()
.venv\Lib\site-packages\sqlalchemy\pool\base.py:899: in __connect
    with util.safe_reraise():
.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv\Lib\site-packages\sqlalchemy\pool\base.py:895: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
.venv\Lib\site-packages\sqlalchemy\engine\create.py:661: in connect
    return dialect.connect(*cargs, **cparams)
.venv\Lib\site-packages\sqlalchemy\engine\default.py:629: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=130.211.68.78 dbname=gmao user=gmao-user password=NbQt4EB*3gYjhu*25wemy73yr#IBXKm! port=5432'
connection_factory = None, cursor_factory = None
kwargs = {'dbname': 'gmao', 'host': '130.211.68.78', 'password': 'NbQt4EB*3gYjhu*25wemy73yr#IBXKm!', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "130.211.68.78", port 5432 failed: Connection timed out (0x0000274C/10060)
E       	Is the server running on that host and accepting TCP/IP connections?
E       
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv\Lib\site-packages\psycopg2\__init__.py:122: OperationalError

---------- coverage: platform win32, python 3.11.6-final-0 -----------
Name                                              Stmts   Miss   Cover   Missing
--------------------------------------------------------------------------------
app\__init__.py                                       1      0 100.00%
app\config\__init__.py                                0      0 100.00%
app\controllers\__init__.py                           0      0 100.00%
app\controllers\activos_controller.py               172    154  10.47%   11-55, 91-157, 170-209, 213-246, 250-253, 258, 263, 268-347, 352-366, 371-398, 408-411
app\controllers\archivos_controller.py               79     62  21.52%   15-69, 76-99, 110-114, 120-130, 136-146, 151-182, 187, 192-213, 218-222
app\controllers\categorias_controller.py            100     82  18.00%   14-53, 66-121, 131-151, 161-238, 251-285, 298-338
app\controllers\estadisticas_controller.py           13      8  38.46%   9-33
app\controllers\inventario_controller.py            203    180  11.33%   16-63, 76-99, 103-118, 126-167, 172-208, 213-259, 265-282, 288-308, 313-326, 331-348, 353-374, 379-422, 427-459, 464-480, 485-499
app\controllers\inventario_controller_simple.py     172    154  10.47%   13-37, 42-77, 83-107, 112-205, 215-328, 333-364, 369-426, 431-466
app\controllers\manuales_controller.py              104    104   0.00%   5-203
app\controllers\orden_recambios_controller.py        89     81   8.99%   10-50, 55-56, 61-173, 178-195, 200-215
app\controllers\ordenes_controller.py               207    186  10.14%   15-36, 74-150, 163-164, 197-239, 244-304, 309-403, 408-418, 423-424, 439-446, 459-495, 505-596
app\controllers\planes_controller.py                420    400   4.76%   14-226, 231-261, 265-346, 360-467, 472-473, 501-649, 654-657, 662-687, 700-839, 848-854, 865-905, 912-1015, 1030-1169
app\controllers\proveedores_controller.py           129    113  12.40%   11-45, 63-100, 114-143, 148-178, 183-186, 191-192, 207-260, 265-268, 273-300, 310-313
app\controllers\solicitudes_admin_controller.py     242    196  19.01%   29-38, 54-111, 127-133, 140-169, 176-225, 232-263, 270-299, 313-360, 368-398, 403-504, 511-581, 599-616
app\controllers\usuarios_controller.py               76     57  25.00%   14-21, 32-80, 89-91, 100-114, 123-158
app\extensions.py                                     9      0 100.00%
app\factory.py                                      177     63  64.41%   25-26, 48, 67, 79-87, 104-110, 125, 181-228, 298-299, 303-305, 309-310, 314-316, 324-325
app\forms\__init__.py                                 0      0 100.00%
app\models\__init__.py                               13      0 100.00%
app\models\activo.py                                 46     16  65.22%   38-45, 50-51, 56-64, 69
app\models\archivo_adjunto.py                        41     14  65.85%   35, 39, 60-61, 66-75, 80, 85-92
app\models\categoria.py                              50     27  46.00%   37-51, 62, 66-70, 73, 91-114
app\models\control_generacion.py                     35     35   0.00%   5-70
app\models\inventario.py                             99     31  68.69%   56, 61-63, 68, 72-80, 84-91, 95-97, 101-103, 134, 139-145, 176-177, 182-184
app\models\manual.py                                 28     11  60.71%   45-53, 57, 73
app\models\movimiento_inventario.py                  59      8  86.44%   51, 56, 61, 65-67, 102, 129
app\models\orden_recambio.py                         20      2  90.00%   32, 35
app\models\orden_trabajo.py                          20      0 100.00%
app\models\plan_mantenimiento.py                     25      0 100.00%
app\models\proveedor.py                              13      1  92.31%   16
app\models\solicitud_servicio.py                     41      7  82.93%   57, 62-71, 76-82, 87-93
app\models\usuario.py                                18      2  88.89%   22, 26
app\routes\__init__.py                                0      0 100.00%
app\routes\activos.py                               146    103  29.45%   23-29, 42-78, 84-110, 117, 124-128, 135-143, 149-159, 169-175, 182-203, 209-214, 220-225, 232-238, 245-249, 256-267
app\routes\actualizar_fecha.py                       33     24  27.27%   17-80
app\routes\calendario.py                             91     70  23.08%   17, 24-167, 174-228, 235-257
app\routes\categorias.py                             31      9  70.97%   11, 17, 23, 29, 35, 41, 51, 57, 63
app\routes\cron.py                                  121    100  17.36%   28-32, 46-128, 145-182, 193-247, 258-314, 319-354, 363-366
app\routes\diagnostico.py                            22     16  27.27%   12-67
app\routes\estadisticas.py                            8      1  87.50%   11
app\routes\inventario.py                            270    193  28.52%   26-28, 40, 47-51, 61-128, 135-147, 154-171, 178, 186-263, 270-301, 308-323, 330-361, 368-393, 400-433, 440-496, 503, 589-638, 648-655, 662-679, 687-708, 716-755, 762, 772
app\routes\inventario_simple.py                      54     54   0.00%   1-126
app\routes\ordenes.py                               166    112  32.53%   40, 47-70, 77-104, 111-115, 122-129, 136-147, 154-160, 167-171, 178-182, 189-193, 200-213, 223-227, 234-238, 245-253, 260-264, 271-277
app\routes\planes.py                                112     87  22.32%   22, 28-54, 65-109, 116-121, 128-155, 162-183, 190-206
app\routes\proveedores.py                            97     72  25.77%   22-39, 49-70, 76-101, 107-115, 121-131, 137-147, 154-158, 165-176
app\routes\recambios.py                              50     36  28.00%   11-15, 21-52, 58-82, 88-94, 100-119
app\routes\solicitudes.py                           149    122  18.12%   26, 32-35, 41-106, 116-122, 128-134, 140-145, 169-219, 225-246, 260-337
app\routes\usuarios.py                              174    143  17.82%   14, 20-92, 98-154, 160-193, 199-262, 268-301, 307-352, 359-448
app\routes\web.py                                   201    146  27.36%   34-39, 48-116, 123-127, 134-148, 155-170, 177-214, 220, 226-243, 252, 258, 264, 269-271, 279, 286-302, 309-418, 436, 443-552
app\utils\__init__.py                                 0      0 100.00%
app\utils\email_utils.py                             97     88   9.28%   18-110, 120, 127-193, 200-262
app\utils\secrets.py                                 49     27  44.90%   17-18, 45-74, 118-125, 165-171
app\utils\storage.py                                176    176   0.00%   6-419
--------------------------------------------------------------------------------
TOTAL                                              4748   3573  24.75%
Coverage HTML written to dir htmlcov

FAIL Required test coverage of 80% not reached. Total coverage: 24.75%
=========================== short test summary info ===========================
ERROR tests/test_security.py::test_csrf_protection_enabled - sqlalchemy.exc.O...
ERROR tests/test_security.py::test_session_cookie_secure_in_production - sqla...
ERROR tests/test_security.py::test_session_cookie_insecure_in_development - s...
ERROR tests/test_security.py::test_secret_key_not_default - sqlalchemy.exc.Op...
ERROR tests/test_security.py::test_rate_limiting_configured - sqlalchemy.exc....
ERROR tests/test_security.py::test_login_rate_limiting - sqlalchemy.exc.Opera...
ERROR tests/test_security.py::test_sql_injection_protection
ERROR tests/test_security.py::test_xss_protection
ERROR tests/test_security.py::test_unauthorized_access_blocked - sqlalchemy.e...
ERROR tests/test_security.py::test_password_hashing - sqlalchemy.exc.Operatio...
ERROR tests/test_security.py::test_no_sensitive_data_in_logs - sqlalchemy.exc...
ERROR tests/test_security.py::test_headers_security - sqlalchemy.exc.Operatio...
============================= 12 errors in 26.59s =============================
