#!/usr/bin/env python3
"""
Script de verificaci√≥n completa de todos los m√≥dulos del sistema GMAO
"""
import os
import sys

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.factory import create_app


def verificar_modulos():
    """Verifica que todos los m√≥dulos funcionen correctamente"""
    print("üîç VERIFICACI√ìN COMPLETA DE M√ìDULOS GMAO")
    print("=" * 60)

    app = create_app()

    with app.app_context():
        try:
            # 1. Verificar base de datos
            print("\n1. üóÑÔ∏è VERIFICANDO BASE DE DATOS...")
            from app.extensions import db

            db.session.execute(db.text("SELECT 1"))
            print("   ‚úÖ Conexi√≥n a BD exitosa")

            # 2. Verificar modelos/tablas
            print("\n2. üìã VERIFICANDO MODELOS Y TABLAS...")
            from app.models.usuario import Usuario
            from app.models.activo import Activo
            from app.models.orden_trabajo import OrdenTrabajo
            from app.models.inventario import Inventario
            from app.models.plan_mantenimiento import PlanMantenimiento
            from app.models.proveedor import Proveedor
            from app.models.categoria import Categoria

            modelos = [
                ("Usuario", Usuario),
                ("Activo", Activo),
                ("OrdenTrabajo", OrdenTrabajo),
                ("Inventario", Inventario),
                ("PlanMantenimiento", PlanMantenimiento),
                ("Proveedor", Proveedor),
                ("Categoria", Categoria),
            ]

            for nombre, modelo in modelos:
                try:
                    count = modelo.query.count()
                    print(f"   ‚úÖ {nombre}: {count} registros")
                except Exception as e:
                    print(f"   ‚ùå {nombre}: Error - {e}")

            # 3. Verificar blueprints/rutas
            print("\n3. üõ£Ô∏è VERIFICANDO BLUEPRINTS Y RUTAS...")
            blueprints = [
                "web",
                "usuarios_controller",
                "activos",
                "ordenes",
                "inventario",
                "planes",
                "estadisticas",
                "proveedores",
                "categorias",
            ]

            for bp_name in blueprints:
                if bp_name in app.blueprints:
                    print(f"   ‚úÖ Blueprint '{bp_name}' registrado")
                else:
                    print(f"   ‚ùå Blueprint '{bp_name}' NO registrado")

            # 4. Verificar rutas principales
            print("\n4. üîó VERIFICANDO RUTAS PRINCIPALES...")
            rutas_principales = [
                "/",
                "/login",
                "/dashboard",
                "/activos/",
                "/ordenes/",
                "/usuarios/",
                "/inventario/",
                "/planes/",
                "/health",
            ]

            with app.test_client() as client:
                for ruta in rutas_principales:
                    try:
                        response = client.get(ruta, follow_redirects=False)
                        status = response.status_code
                        if status in [200, 302, 401]:  # C√≥digos esperados
                            print(f"   ‚úÖ {ruta}: HTTP {status}")
                        else:
                            print(f"   ‚ö†Ô∏è {ruta}: HTTP {status}")
                    except Exception as e:
                        print(f"   ‚ùå {ruta}: Error - {e}")

            # 5. Verificar controladores
            print("\n5. üéÆ VERIFICANDO CONTROLADORES...")
            try:
                from app.controllers.usuarios_controller import autenticar_usuario

                print("   ‚úÖ usuarios_controller importado")

                from app.controllers.activos_controller import listar_activos

                print("   ‚úÖ activos_controller importado")

                from app.controllers.ordenes_controller import listar_ordenes

                print("   ‚úÖ ordenes_controller importado")

                from app.controllers.inventario_controller_simple import (
                    obtener_estadisticas_inventario,
                )

                print("   ‚úÖ inventario_controller importado")

                from app.controllers.planes_controller import listar_planes

                print("   ‚úÖ planes_controller importado")

            except Exception as e:
                print(f"   ‚ùå Error importando controladores: {e}")

            # 6. Verificar extensiones
            print("\n6. üîß VERIFICANDO EXTENSIONES...")
            try:
                from app.extensions import db, csrf, limiter

                print("   ‚úÖ Extensions b√°sicas (db, csrf, limiter)")

                from flask_login import LoginManager

                print("   ‚úÖ Flask-Login")

                from flask_migrate import Migrate

                print("   ‚úÖ Flask-Migrate")

            except Exception as e:
                print(f"   ‚ùå Error con extensiones: {e}")

            # 7. Verificar templates
            print("\n7. üé® VERIFICANDO TEMPLATES...")
            templates_principales = [
                "web/login.html",
                "web/dashboard.html",
                "base.html",
            ]

            for template in templates_principales:
                template_path = os.path.join("app", "templates", template)
                if os.path.exists(template_path):
                    print(f"   ‚úÖ {template}")
                else:
                    print(f"   ‚ùå {template} NO encontrado")

            # 8. Verificar archivos est√°ticos
            print("\n8. üìÅ VERIFICANDO ARCHIVOS EST√ÅTICOS...")
            static_files = ["static/css", "static/js", "static/img"]

            for static_dir in static_files:
                if os.path.exists(static_dir):
                    files_count = (
                        len(os.listdir(static_dir)) if os.path.isdir(static_dir) else 0
                    )
                    print(f"   ‚úÖ {static_dir}: {files_count} archivos")
                else:
                    print(f"   ‚ùå {static_dir} NO encontrado")

            # 9. Verificar configuraci√≥n
            print("\n9. ‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN...")
            configs = [
                ("SECRET_KEY", app.config.get("SECRET_KEY")),
                ("SQLALCHEMY_DATABASE_URI", app.config.get("SQLALCHEMY_DATABASE_URI")),
                ("CSRF_ENABLED", app.config.get("WTF_CSRF_ENABLED")),
                ("DEBUG", app.config.get("DEBUG")),
            ]

            for config_name, config_value in configs:
                if config_value is not None:
                    print(
                        f"   ‚úÖ {config_name}: {'***' if 'SECRET' in config_name else config_value}"
                    )
                else:
                    print(f"   ‚ùå {config_name}: NO configurado")

            # 10. Test de login completo
            print("\n10. üîê TEST DE LOGIN COMPLETO...")
            try:
                # Buscar usuario admin
                admin = Usuario.query.filter_by(username="admin").first()
                if admin:
                    print(f"   ‚úÖ Usuario admin encontrado (ID: {admin.id})")

                    # Test de autenticaci√≥n
                    if admin.check_password("admin123"):
                        print("   ‚úÖ Autenticaci√≥n correcta")

                        # Test de login via controlador
                        from app.controllers.usuarios_controller import (
                            autenticar_usuario,
                        )

                        user_auth = autenticar_usuario("admin", "admin123")
                        if user_auth:
                            print("   ‚úÖ Login via controlador exitoso")
                        else:
                            print("   ‚ùå Login via controlador fall√≥")
                    else:
                        print("   ‚ùå Autenticaci√≥n fall√≥")
                else:
                    print("   ‚ùå Usuario admin no encontrado")

            except Exception as e:
                print(f"   ‚ùå Error en test de login: {e}")

            print("\n" + "=" * 60)
            print("üéâ VERIFICACI√ìN COMPLETADA")
            print("Si todos los m√≥dulos muestran ‚úÖ, la aplicaci√≥n est√° lista")

        except Exception as e:
            print(f"‚ùå Error durante verificaci√≥n: {e}")
            import traceback

            traceback.print_exc()


if __name__ == "__main__":
    verificar_modulos()
