#!/usr/bin/env python3
"""
Script para eliminar art√≠culos de prueba FIFO del sistema
"""
import os
import sys
import sqlite3
from datetime import datetime

# A√±adir el directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def eliminar_articulos_fifo():
    """Eliminar todos los art√≠culos y lotes FIFO de prueba"""
    print("üóëÔ∏è  === ELIMINANDO ART√çCULOS DE PRUEBA FIFO ===")

    try:
        # Conectar a la base de datos
        conn = sqlite3.connect("inventario.db")
        cursor = conn.cursor()

        # Verificar qu√© tenemos antes de eliminar
        print("\nüìä Estado actual:")

        # Contar art√≠culos FIFO
        cursor.execute("SELECT COUNT(*) FROM inventario WHERE codigo LIKE 'FIFO%'")
        count_articulos = cursor.fetchone()[0]
        print(f"   ‚Ä¢ Art√≠culos FIFO: {count_articulos}")

        # Contar lotes FIFO
        cursor.execute(
            """
            SELECT COUNT(*) FROM lotes 
            WHERE codigo_articulo LIKE 'FIFO%'
        """
        )
        count_lotes = cursor.fetchone()[0]
        print(f"   ‚Ä¢ Lotes FIFO: {count_lotes}")

        if count_articulos == 0 and count_lotes == 0:
            print("‚úÖ No hay art√≠culos FIFO de prueba para eliminar")
            conn.close()
            return True

        # Mostrar art√≠culos que se van a eliminar
        print(f"\nüìã Art√≠culos FIFO a eliminar:")
        cursor.execute(
            "SELECT codigo, descripcion FROM inventario WHERE codigo LIKE 'FIFO%'"
        )
        articulos = cursor.fetchall()

        for codigo, descripcion in articulos:
            print(f"   ‚Ä¢ {codigo}: {descripcion}")

        # Mostrar lotes que se van a eliminar
        print(f"\nüè∑Ô∏è  Lotes FIFO a eliminar:")
        cursor.execute(
            """
            SELECT l.numero_lote, l.codigo_articulo, l.cantidad 
            FROM lotes l 
            WHERE l.codigo_articulo LIKE 'FIFO%'
            ORDER BY l.numero_lote
        """
        )
        lotes = cursor.fetchall()

        for numero_lote, codigo_articulo, cantidad in lotes:
            print(f"   ‚Ä¢ {numero_lote} ({codigo_articulo}): {cantidad} uds")

        # Confirmar eliminaci√≥n
        print(
            f"\n‚ö†Ô∏è  ¬øEst√°s seguro de que quieres eliminar {count_articulos} art√≠culos y {count_lotes} lotes FIFO?"
        )
        print("   Esta acci√≥n NO se puede deshacer.")
        respuesta = input("   Escribe 'SI' para confirmar: ").strip().upper()

        if respuesta != "SI":
            print("‚ùå Operaci√≥n cancelada por el usuario")
            conn.close()
            return False

        print(f"\nüóëÔ∏è  Iniciando eliminaci√≥n...")

        # 1. Eliminar lotes FIFO primero (por integridad referencial)
        print("   1Ô∏è‚É£ Eliminando lotes FIFO...")
        cursor.execute("DELETE FROM lotes WHERE codigo_articulo LIKE 'FIFO%'")
        lotes_eliminados = cursor.rowcount
        print(f"      ‚úÖ {lotes_eliminados} lotes eliminados")

        # 2. Eliminar movimientos de inventario FIFO
        print("   2Ô∏è‚É£ Eliminando movimientos de inventario FIFO...")
        cursor.execute(
            "DELETE FROM movimientos_inventario WHERE codigo_articulo LIKE 'FIFO%'"
        )
        movimientos_eliminados = cursor.rowcount
        print(f"      ‚úÖ {movimientos_eliminados} movimientos eliminados")

        # 3. Eliminar art√≠culos FIFO
        print("   3Ô∏è‚É£ Eliminando art√≠culos FIFO...")
        cursor.execute("DELETE FROM inventario WHERE codigo LIKE 'FIFO%'")
        articulos_eliminados = cursor.rowcount
        print(f"      ‚úÖ {articulos_eliminados} art√≠culos eliminados")

        # Confirmar cambios
        conn.commit()

        # Verificar que se elimin√≥ todo
        print(f"\n‚úÖ Verificaci√≥n post-eliminaci√≥n:")

        cursor.execute("SELECT COUNT(*) FROM inventario WHERE codigo LIKE 'FIFO%'")
        remaining_articulos = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM lotes WHERE codigo_articulo LIKE 'FIFO%'")
        remaining_lotes = cursor.fetchone()[0]

        cursor.execute(
            "SELECT COUNT(*) FROM movimientos_inventario WHERE codigo_articulo LIKE 'FIFO%'"
        )
        remaining_movimientos = cursor.fetchone()[0]

        print(f"   ‚Ä¢ Art√≠culos FIFO restantes: {remaining_articulos}")
        print(f"   ‚Ä¢ Lotes FIFO restantes: {remaining_lotes}")
        print(f"   ‚Ä¢ Movimientos FIFO restantes: {remaining_movimientos}")

        if (
            remaining_articulos == 0
            and remaining_lotes == 0
            and remaining_movimientos == 0
        ):
            print(f"\nüéâ ¬°ELIMINACI√ìN COMPLETADA CON √âXITO!")
            print(
                f"   ‚Ä¢ Total eliminado: {articulos_eliminados} art√≠culos, {lotes_eliminados} lotes, {movimientos_eliminados} movimientos"
            )
            print(f"   ‚Ä¢ Base de datos limpia de art√≠culos FIFO de prueba")
        else:
            print(
                f"\n‚ö†Ô∏è  Advertencia: Algunos elementos FIFO no se eliminaron completamente"
            )

        conn.close()
        return True

    except sqlite3.Error as e:
        print(f"‚ùå Error de base de datos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback

        traceback.print_exc()
        return False


def verificar_estado_limpio():
    """Verificar que no queden art√≠culos FIFO en el sistema"""
    print(f"\nüîç === VERIFICACI√ìN FINAL ===")

    try:
        conn = sqlite3.connect("inventario.db")
        cursor = conn.cursor()

        # Verificar todas las tablas relevantes
        tablas_verificar = [
            ("inventario", "codigo"),
            ("lotes", "codigo_articulo"),
            ("movimientos_inventario", "codigo_articulo"),
        ]

        todo_limpio = True

        for tabla, columna in tablas_verificar:
            cursor.execute(f"SELECT COUNT(*) FROM {tabla} WHERE {columna} LIKE 'FIFO%'")
            count = cursor.fetchone()[0]

            if count > 0:
                print(f"   ‚ùå {tabla}: {count} registros FIFO encontrados")
                todo_limpio = False
            else:
                print(f"   ‚úÖ {tabla}: Limpia")

        # Verificar estado general del inventario
        cursor.execute("SELECT COUNT(*) FROM inventario")
        total_articulos = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM lotes")
        total_lotes = cursor.fetchone()[0]

        print(f"\nüìä Estado actual del sistema:")
        print(f"   ‚Ä¢ Total art√≠culos: {total_articulos}")
        print(f"   ‚Ä¢ Total lotes: {total_lotes}")

        conn.close()

        if todo_limpio:
            print(f"\n‚úÖ Sistema completamente limpio de art√≠culos FIFO de prueba")
            print(f"üí° El sistema FIFO sigue disponible para art√≠culos reales")
        else:
            print(f"\n‚ö†Ô∏è  Se encontraron algunos registros FIFO restantes")

        return todo_limpio

    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üßπ HERRAMIENTA DE LIMPIEZA DE ART√çCULOS FIFO")
    print("=" * 50)
    print("Esta herramienta eliminar√° TODOS los art√≠culos de prueba FIFO")
    print("del sistema, incluyendo lotes y movimientos asociados.")
    print("=" * 50)

    # Paso 1: Eliminar art√≠culos FIFO
    exito = eliminar_articulos_fifo()

    if exito:
        # Paso 2: Verificar que todo est√° limpio
        verificar_estado_limpio()

        print(f"\nüéØ RESULTADO FINAL:")
        print("   ‚úÖ Art√≠culos FIFO de prueba eliminados")
        print("   ‚úÖ Sistema FIFO sigue funcional para art√≠culos reales")
        print("   ‚úÖ Base de datos limpia y optimizada")

        print(f"\nüí° Pr√≥ximos pasos:")
        print("   ‚Ä¢ El sistema FIFO sigue disponible")
        print("   ‚Ä¢ Puedes agregar art√≠culos reales cuando lo necesites")
        print("   ‚Ä¢ La integraci√≥n en inventario permanece activa")

    else:
        print(f"\n‚ùå No se pudieron eliminar todos los art√≠culos FIFO")
        print("   Revisa los errores mostrados arriba")


if __name__ == "__main__":
    main()
