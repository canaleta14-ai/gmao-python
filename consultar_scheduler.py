"""
Consultar estado actual del scheduler
"""

import os
import sys
from datetime import datetime

# Configurar ruta
sys.path.append("c:/gmao - copia")
os.chdir("c:/gmao - copia")

from scheduler_simple import OrdenesScheduler


def consultar_scheduler():
    """Consultar configuraci√≥n actual"""
    scheduler = OrdenesScheduler()

    print("‚è∞ CONFIGURACI√ìN DEL SCHEDULER DE √ìRDENES")
    print("=" * 45)

    # Hora configurada
    print(f"üïö Hora programada: {scheduler.target_time.strftime('%H:%M')} (11:00 AM)")

    # Fecha/hora actual
    ahora = datetime.now()
    print(f"üìÖ Fecha/hora actual: {ahora.strftime('%Y-%m-%d %H:%M:%S')}")

    # Pr√≥xima ejecuci√≥n
    proxima = scheduler.calcular_proxima_ejecucion()
    print(f"‚è≠Ô∏è  Pr√≥xima ejecuci√≥n: {proxima.strftime('%Y-%m-%d %H:%M:%S')}")

    # Tiempo restante
    segundos = scheduler.tiempo_hasta_proxima_ejecucion()
    horas = segundos / 3600
    minutos = segundos / 60

    print(f"‚è±Ô∏è  Tiempo restante: {horas:.1f} horas ({minutos:.0f} minutos)")

    # Frecuencia
    print(f"üîÑ Frecuencia: Diaria")
    print(f"üìù Descripci√≥n: Genera √≥rdenes autom√°ticamente todos los d√≠as")

    # Estado del sistema
    print("\n‚úÖ RESUMEN:")
    print("   ‚Ä¢ El scheduler se ejecuta autom√°ticamente todos los d√≠as")
    print("   ‚Ä¢ Hora exacta: 11:00 AM (cada 24 horas)")
    print("   ‚Ä¢ Genera √≥rdenes para planes vencidos o pr√≥ximos a vencer")
    print("   ‚Ä¢ Funciona en segundo plano")


if __name__ == "__main__":
    consultar_scheduler()
