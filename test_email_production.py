#!/usr/bin/env python3
"""
Script para probar el env√≠o de emails en producci√≥n
Utiliza la configuraci√≥n actual de la aplicaci√≥n
"""

import os
import sys
import requests
from datetime import datetime

def test_email_production():
    """Prueba el env√≠o de emails en producci√≥n"""
    
    # URL de la aplicaci√≥n en producci√≥n
    base_url = "https://mantenimiento-470311.ew.r.appspot.com"
    
    print("üîß Probando env√≠o de emails en producci√≥n...")
    print(f"üìç URL base: {base_url}")
    print(f"‚è∞ Fecha/hora: {datetime.now()}")
    print("-" * 50)
    
    try:
        # Verificar que la aplicaci√≥n est√© funcionando
        print("1. Verificando que la aplicaci√≥n est√© activa...")
        response = requests.get(f"{base_url}/", timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ Aplicaci√≥n activa y respondiendo")
        else:
            print(f"‚ùå Error: La aplicaci√≥n respondi√≥ con c√≥digo {response.status_code}")
            return False
            
        # Verificar endpoint de diagn√≥stico si existe
        print("\n2. Verificando endpoint de diagn√≥stico...")
        try:
            diag_response = requests.get(f"{base_url}/diagnostico", timeout=30)
            if diag_response.status_code == 200:
                print("‚úÖ Endpoint de diagn√≥stico disponible")
            else:
                print(f"‚ö†Ô∏è  Endpoint de diagn√≥stico no disponible (c√≥digo {diag_response.status_code})")
        except Exception as e:
            print(f"‚ö†Ô∏è  Endpoint de diagn√≥stico no accesible: {e}")
        
        # Verificar cron job (que incluye env√≠o de emails)
        print("\n3. Verificando cron job...")
        try:
            cron_response = requests.get(f"{base_url}/api/cron/generar-ordenes-preventivas", timeout=60)
            if cron_response.status_code == 200:
                print("‚úÖ Cron job ejecutado correctamente")
                print("üìß Si hay √≥rdenes pendientes, se habr√°n enviado emails de notificaci√≥n")
            else:
                print(f"‚ö†Ô∏è  Cron job respondi√≥ con c√≥digo {cron_response.status_code}")
        except Exception as e:
            print(f"‚ùå Error ejecutando cron job: {e}")
        
        print("\n" + "=" * 50)
        print("üìß RESUMEN DE CONFIGURACI√ìN DE EMAIL:")
        print("- MAIL_SERVER: smtp.gmail.com")
        print("- MAIL_PORT: 587")
        print("- MAIL_USE_TLS: True")
        print("- MAIL_USERNAME: j_hidalgo@disfood.com")
        print("- MAIL_PASSWORD: *** (desde Secret Manager)")
        print("- ADMIN_EMAILS: j_hidalgo@disfood.com")
        print("=" * 50)
        
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando prueba de emails en producci√≥n...")
    success = test_email_production()
    
    if success:
        print("\n‚úÖ Prueba completada. Revisa tu email para verificar la recepci√≥n.")
        print("üìù Nota: Los emails se env√≠an solo cuando hay √≥rdenes de mantenimiento pendientes.")
    else:
        print("\n‚ùå Prueba fall√≥. Revisa los logs para m√°s detalles.")
    
    sys.exit(0 if success else 1)