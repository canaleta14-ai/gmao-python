#!/usr/bin/env python3
"""
Configuraci√≥n de base de datos PostgreSQL para producci√≥n
"""

import os
import sys


def configure_postgresql():
    """Configurar conexi√≥n a PostgreSQL en Cloud SQL"""

    print("üóÑÔ∏è Configurando conexi√≥n a PostgreSQL...")

    # Configuraci√≥n para Cloud SQL
    if os.getenv("GAE_ENV", "").startswith("standard"):
        # En App Engine
        db_socket_dir = os.environ.get("DB_SOCKET_DIR", "/cloudsql")
        instance_connection_name = f"disfood-gmao:us-central1:gmao-db"
        db_socket_path = f"{db_socket_dir}/{instance_connection_name}"

        database_url = (
            f"postgresql+psycopg2://{os.environ['DB_USER']}:"
            f"{os.environ['DB_PASSWORD']}@/"
            f"{os.environ['DB_NAME']}?host={db_socket_path}"
        )
    else:
        # En local o con Cloud SQL Proxy
        database_url = (
            f"postgresql+psycopg2://{os.environ.get('DB_USER', 'gmao_user')}:"
            f"{os.environ.get('DB_PASSWORD', 'password')}@"
            f"{os.environ.get('DB_HOST', 'localhost')}:"
            f"{os.environ.get('DB_PORT', '5432')}/"
            f"{os.environ.get('DB_NAME', 'gmao_production')}"
        )

    os.environ["DATABASE_URL"] = database_url
    print(f"‚úÖ DATABASE_URL configurada")

    return database_url


def init_production_database():
    """Inicializar base de datos con tablas y datos b√°sicos"""

    try:
        from app.factory import create_app
        from app.extensions import db
        from app.models.usuario import Usuario
        from app.models.categoria import Categoria
        from werkzeug.security import generate_password_hash

        app = create_app()

        with app.app_context():
            print("üîß Creando tablas de base de datos...")
            db.create_all()

            # Crear usuario administrador si no existe
            admin = Usuario.query.filter_by(username="admin").first()
            if not admin:
                print("üë§ Creando usuario administrador...")
                admin_password = os.environ.get("ADMIN_INITIAL_PASSWORD", "Admin123!")
                admin = Usuario(
                    username="admin",
                    email="admin@disfood.com",
                    password_hash=generate_password_hash(admin_password),
                    rol="admin",
                )
                db.session.add(admin)
                db.session.commit()
                print(f"‚úÖ Usuario admin creado con password: {admin_password}")

            # Crear categor√≠as b√°sicas si no existen
            categorias_basicas = [
                "Equipos de Cocina",
                "Refrigeraci√≥n",
                "Sistemas de Ventilaci√≥n",
                "Equipos de Limpieza",
                "Mobiliario",
                "Sistemas El√©ctricos",
                "Fontaner√≠a",
                "Otros",
            ]

            categorias_existentes = Categoria.query.count()
            if categorias_existentes == 0:
                print("üìÇ Creando categor√≠as b√°sicas...")
                for nombre in categorias_basicas:
                    categoria = Categoria(
                        nombre=nombre, descripcion=f"Categor√≠a para {nombre.lower()}"
                    )
                    db.session.add(categoria)

                db.session.commit()
                print(f"‚úÖ {len(categorias_basicas)} categor√≠as creadas")

            print("‚úÖ Base de datos inicializada correctamente")

    except Exception as e:
        print(f"‚ùå Error inicializando base de datos: {e}")
        sys.exit(1)


if __name__ == "__main__":
    configure_postgresql()
    init_production_database()
