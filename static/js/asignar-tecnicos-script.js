/**
 * Script para asignaci√≥n masiva de t√©cnicos con notificaciones de Bootstrap
 * Usar en la consola del navegador (F12 ‚Üí Console)
 */

// Funci√≥n auxiliar para mostrar notificaciones con el sistema de la app
function mostrarNotificacion(mensaje, tipo = 'info', titulo = null) {
    if (window.showNotificationToast) {
        window.showNotificationToast(mensaje, tipo);
    } else {
        // Fallback si la funci√≥n no est√° disponible
        console.log(`[${tipo.toUpperCase()}] ${titulo || ''}: ${mensaje}`);
    }
}

// Funci√≥n auxiliar para mostrar detalles en consola con formato bonito
function mostrarDetalles(detalles) {
    if (!detalles || detalles.length === 0) return;
    
    console.log('%cüìä Detalles de Asignaci√≥n:', 'font-weight: bold; font-size: 14px; color: #0d6efd;');
    console.table(detalles.map(d => ({
        'Orden': d.numero_orden,
        'T√©cnico': d.tecnico,
        'ID': d.orden_id
    })));
}

/**
 * PASO 1: Convertirse en Administrador
 */
async function paso1_hacerseAdmin() {
    console.log('%cüîê PASO 1: Haci√©ndote administrador...', 'font-weight: bold; font-size: 14px; color: #0d6efd;');
    
    try {
        const response = await fetch('/admin/hacerme-admin', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'}
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ', data.message);
            mostrarNotificacion(data.message, 'success');
            return true;
        } else {
            console.error('‚ùå', data.error);
            mostrarNotificacion(data.error, 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error:', error);
        mostrarNotificacion('Error al actualizar rol: ' + error.message, 'error');
        return false;
    }
}

/**
 * PASO 2: Crear T√©cnico Demo
 */
async function paso2_crearTecnico() {
    console.log('%cüë∑ PASO 2: Creando t√©cnico demo...', 'font-weight: bold; font-size: 14px; color: #0d6efd;');
    
    try {
        const response = await fetch('/admin/crear-tecnico-demo', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'}
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ', data.message);
            mostrarNotificacion(data.message, 'success');
            return true;
        } else {
            console.error('‚ùå', data.error);
            mostrarNotificacion(data.error, 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error:', error);
        mostrarNotificacion('Error al crear t√©cnico: ' + error.message, 'error');
        return false;
    }
}

/**
 * PASO 3: Asignar T√©cnicos a √ìrdenes
 */
async function paso3_asignarTecnicos() {
    console.log('%cüìã PASO 3: Asignando t√©cnicos a √≥rdenes...', 'font-weight: bold; font-size: 14px; color: #0d6efd;');
    
    try {
        const response = await fetch('/admin/asignar-tecnicos', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'}
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ √âXITO:', data.message);
            console.log('üìä √ìrdenes asignadas:', data.asignadas);
            
            mostrarNotificacion(
                `Se asignaron t√©cnicos a ${data.asignadas} √≥rdenes exitosamente`,
                'success'
            );
            
            if (data.detalles && data.detalles.length > 0) {
                mostrarDetalles(data.detalles);
            }
            
            return true;
        } else {
            console.error('‚ùå', data.error);
            mostrarNotificacion(data.error, 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error:', error);
        mostrarNotificacion('Error al asignar t√©cnicos: ' + error.message, 'error');
        return false;
    }
}

/**
 * FUNCI√ìN PRINCIPAL: Ejecuta todos los pasos en secuencia
 */
async function solucionCompleta() {
    console.log('%cüöÄ SOLUCI√ìN COMPLETA - Asignaci√≥n Masiva de T√©cnicos', 'font-weight: bold; font-size: 16px; color: #198754; background: #d1e7dd; padding: 8px;');
    console.log('%cEjecutando 3 pasos autom√°ticamente...', 'color: #666; font-style: italic;');
    console.log('');
    
    try {
        // Paso 1: Hacerse administrador
        const paso1Ok = await paso1_hacerseAdmin();
        if (!paso1Ok) {
            mostrarNotificacion('No se pudo completar el Paso 1. Revisa la consola.', 'warning');
            return;
        }
        
        // Peque√±a pausa entre pasos
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Paso 2: Crear t√©cnico
        const paso2Ok = await paso2_crearTecnico();
        if (!paso2Ok) {
            mostrarNotificacion('No se pudo completar el Paso 2. Revisa la consola.', 'warning');
            return;
        }
        
        // Peque√±a pausa antes del paso final
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Paso 3: Asignar t√©cnicos
        const paso3Ok = await paso3_asignarTecnicos();
        if (!paso3Ok) {
            mostrarNotificacion('No se pudo completar el Paso 3. Revisa la consola.', 'warning');
            return;
        }
        
        // √âxito total
        console.log('');
        console.log('%c‚úÖ ¬°COMPLETADO CON √âXITO!', 'font-weight: bold; font-size: 16px; color: #198754; background: #d1e7dd; padding: 8px;');
        console.log('%cRecargando p√°gina en 3 segundos...', 'color: #666; font-style: italic;');
        
        mostrarNotificacion(
            '¬°Proceso completado! Recargando p√°gina en 3 segundos...',
            'success'
        );
        
        // Recargar p√°gina despu√©s de 3 segundos
        setTimeout(() => {
            location.reload();
        }, 3000);
        
    } catch (error) {
        console.error('%c‚ùå ERROR CR√çTICO', 'font-weight: bold; color: #dc3545;');
        console.error(error);
        mostrarNotificacion('Error cr√≠tico: ' + error.message, 'error');
    }
}

// ==============================================================
// EJECUTAR AUTOM√ÅTICAMENTE AL CARGAR EL SCRIPT
// ==============================================================

console.log('%cüéØ Script de Asignaci√≥n de T√©cnicos Cargado', 'font-weight: bold; font-size: 14px; color: #0d6efd;');
console.log('');
console.log('Funciones disponibles:');
console.log('  ‚Ä¢ solucionCompleta()     - Ejecuta todos los pasos autom√°ticamente');
console.log('  ‚Ä¢ paso1_hacerseAdmin()   - Solo convierte en admin');
console.log('  ‚Ä¢ paso2_crearTecnico()   - Solo crea t√©cnico demo');
console.log('  ‚Ä¢ paso3_asignarTecnicos() - Solo asigna t√©cnicos');
console.log('');
console.log('%cEjecutando soluci√≥n completa...', 'color: #198754; font-weight: bold;');
console.log('');

// Ejecutar autom√°ticamente
solucionCompleta();
