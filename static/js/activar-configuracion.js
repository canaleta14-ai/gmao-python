// Script para activar t√©cnicos y configurar generaci√≥n autom√°tica
console.log('üîß ACTIVANDO T√âCNICOS Y CONFIGURANDO GENERACI√ìN');
console.log('='.repeat(55));

async function activarTecnicosYConfiguracion() {
    try {
        const csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content') ||
                         document.querySelector('input[name=csrf_token]')?.value;
        
        console.log('üë• 1. ACTIVANDO T√âCNICOS...');
        
        // Obtener lista de usuarios
        const usuariosResponse = await fetch('/usuarios/api', {
            headers: { 'X-CSRFToken': csrfToken }
        });
        
        if (usuariosResponse.ok) {
            const usuariosData = await usuariosResponse.json();
            const usuarios = usuariosData.usuarios || [];
            
            const tecnicos = usuarios.filter(u => 
                u.rol && (
                    u.rol.toLowerCase().includes('t√©cnico') || 
                    u.rol.toLowerCase().includes('tecnico')
                )
            );
            
            console.log(`üîß Encontrados ${tecnicos.length} t√©cnicos para activar`);
            
            // Activar cada t√©cnico
            for (const tecnico of tecnicos) {
                console.log(`‚öôÔ∏è Activando t√©cnico: ${tecnico.nombre} (ID: ${tecnico.id})`);
                
                try {
                    const activarResponse = await fetch(`/usuarios/api/${tecnico.id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': csrfToken
                        },
                        body: JSON.stringify({
                            nombre: tecnico.nombre,
                            email: tecnico.email,
                            rol: tecnico.rol,
                            activo: true,  // Activar t√©cnico
                            username: tecnico.username || `${tecnico.nombre.toLowerCase().replace(' ', '')}`
                        })
                    });
                    
                    if (activarResponse.ok) {
                        console.log(`   ‚úÖ ${tecnico.nombre} activado correctamente`);
                    } else {
                        const errorData = await activarResponse.json();
                        console.log(`   ‚ùå Error activando ${tecnico.nombre}:`, errorData);
                    }
                } catch (error) {
                    console.log(`   ‚ùå Error activando ${tecnico.nombre}:`, error.message);
                }
            }
        }
        
        console.log('');
        console.log('ü§ñ 2. CONFIGURANDO GENERACI√ìN AUTOM√ÅTICA EN PLANES...');
        
        // Obtener planes
        const planesResponse = await fetch('/planes/api', {
            headers: { 'X-CSRFToken': csrfToken }
        });
        
        if (planesResponse.ok) {
            const planesData = await planesResponse.json();
            const planes = planesData.planes || planesData.items || [];
            
            for (const plan of planes) {
                console.log(`‚öôÔ∏è Configurando plan: ${plan.codigo} - ${plan.nombre}`);
                
                try {
                    // Obtener detalles actuales del plan
                    const detalleResponse = await fetch(`/planes/api/${plan.id}`, {
                        headers: { 'X-CSRFToken': csrfToken }
                    });
                    
                    if (detalleResponse.ok) {
                        const detalle = await detalleResponse.json();
                        
                        // Actualizar con generaci√≥n autom√°tica activada
                        const actualizarResponse = await fetch(`/planes/api/${plan.id}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRFToken': csrfToken
                            },
                            body: JSON.stringify({
                                ...detalle,
                                generacion_automatica: true,  // Activar generaci√≥n autom√°tica
                                estado: 'Activo'  // Asegurar que est√© activo
                            })
                        });
                        
                        if (actualizarResponse.ok) {
                            console.log(`   ‚úÖ Generaci√≥n autom√°tica activada para ${plan.codigo}`);
                        } else {
                            const errorData = await actualizarResponse.json();
                            console.log(`   ‚ùå Error configurando ${plan.codigo}:`, errorData);
                        }
                    }
                } catch (error) {
                    console.log(`   ‚ùå Error configurando ${plan.codigo}:`, error.message);
                }
            }
        }
        
        console.log('');
        console.log('‚úÖ 3. CONFIGURACI√ìN COMPLETADA');
        console.log('üí° Ahora ejecuta: generarOrdenesManualMejorado() para probar');
        
    } catch (error) {
        console.error('‚ùå Error en configuraci√≥n:', error);
    }
}

activarTecnicosYConfiguracion();