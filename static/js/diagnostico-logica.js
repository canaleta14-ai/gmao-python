// Diagn√≥stico espec√≠fico de la l√≥gica de generaci√≥n
console.log('üîç DIAGN√ìSTICO DETALLADO - L√ìGICA DE GENERACI√ìN');
console.log('='.repeat(60));

async function diagnosticoLogicaGeneracion() {
    try {
        const csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content') ||
                         document.querySelector('input[name=csrf_token]')?.value;
        
        console.log('üìã Simulando la l√≥gica EXACTA del backend...');
        console.log('');
        
        // Obtener planes
        const planesResponse = await fetch('/planes/api', {
            headers: { 'X-CSRFToken': csrfToken }
        });
        
        const planesData = await planesResponse.json();
        const planes = planesData.planes || planesData.items || [];
        
        // Simular la fecha/hora actual como lo hace el backend
        const ahora = new Date(); // datetime.now() en Python
        const ahoraStr = ahora.toISOString();
        
        console.log(`üïê Fecha/hora actual (como backend): ${ahoraStr}`);
        console.log(`üìÖ Solo fecha: ${ahora.toISOString().split('T')[0]}`);
        console.log(`‚è∞ Solo hora: ${ahora.toISOString().split('T')[1]}`);
        console.log('');
        
        for (const plan of planes) {
            console.log(`üìã Analizando: ${plan.codigo} - ${plan.nombre}`);
            console.log(`   Estado: ${plan.estado}`);
            console.log(`   Pr√≥xima ejecuci√≥n: ${plan.proxima_ejecucion}`);
            
            // Obtener detalles completos
            try {
                const detalleResponse = await fetch(`/planes/api/${plan.id}`, {
                    headers: { 'X-CSRFToken': csrfToken }
                });
                
                if (detalleResponse.ok) {
                    const detalle = await detalleResponse.json();
                    console.log(`   Generaci√≥n autom√°tica: ${detalle.generacion_automatica}`);
                    
                    // Simular las condiciones EXACTAS del backend
                    const cumpleEstado = plan.estado === "Activo";
                    const cumpleGeneracion = detalle.generacion_automatica === true;
                    
                    // CLAVE: Analizar la comparaci√≥n de fechas
                    const fechaEjecucion = plan.proxima_ejecucion;
                    console.log(`   üìä Comparaci√≥n de fechas:`);
                    console.log(`      Backend compara: "${fechaEjecucion}" <= "${ahoraStr}"`);
                    
                    // Intentar diferentes interpretaciones de la fecha
                    const fechaEjecucionComoFecha = new Date(fechaEjecucion + 'T00:00:00');
                    const fechaEjecucionComoFechaISO = new Date(fechaEjecucion);
                    
                    console.log(`      Como fecha 00:00: ${fechaEjecucionComoFecha.toISOString()}`);
                    console.log(`      Como fecha ISO: ${fechaEjecucionComoFechaISO.toISOString()}`);
                    
                    const cumpleFecha1 = fechaEjecucionComoFecha <= ahora;
                    const cumpleFecha2 = fechaEjecucionComoFechaISO <= ahora;
                    
                    console.log(`      ¬øVencido opci√≥n 1?: ${cumpleFecha1}`);
                    console.log(`      ¬øVencido opci√≥n 2?: ${cumpleFecha2}`);
                    
                    const cumpleTodasCondiciones = cumpleEstado && cumpleGeneracion && (cumpleFecha1 || cumpleFecha2);
                    
                    console.log(`   üéØ Resumen de condiciones:`);
                    console.log(`      ‚úÖ Estado Activo: ${cumpleEstado}`);
                    console.log(`      ‚úÖ Generaci√≥n autom√°tica: ${cumpleGeneracion}`);
                    console.log(`      ‚ùì Fecha vencida: ${cumpleFecha1 || cumpleFecha2}`);
                    console.log(`      üéØ ¬øDebe generar?: ${cumpleTodasCondiciones}`);
                    
                    if (!cumpleTodasCondiciones) {
                        console.log(`   üö® RAZONES por las que NO genera:`);
                        if (!cumpleEstado) console.log(`      - Estado no es "Activo"`);
                        if (!cumpleGeneracion) console.log(`      - Generaci√≥n autom√°tica no es true`);
                        if (!cumpleFecha1 && !cumpleFecha2) console.log(`      - Fecha no est√° vencida`);
                    }
                }
            } catch (error) {
                console.log(`   ‚ùå Error obteniendo detalles: ${error.message}`);
            }
            
            console.log('');
        }
        
        // Verificar √≥rdenes existentes
        console.log('üìã VERIFICANDO √ìRDENES EXISTENTES...');
        try {
            const ordenesResponse = await fetch('/ordenes/api', {
                headers: { 'X-CSRFToken': csrfToken }
            });
            
            if (ordenesResponse.ok) {
                const ordenesData = await ordenesResponse.json();
                const ordenes = ordenesData.ordenes || ordenesData.items || [];
                
                const ordenesHoy = ordenes.filter(o => {
                    const fechaCreacion = o.fecha_creacion || o.fecha_programada;
                    return fechaCreacion && fechaCreacion.includes('2025-10-03');
                });
                
                console.log(`üìä Total √≥rdenes en el sistema: ${ordenes.length}`);
                console.log(`üìÖ √ìrdenes creadas hoy: ${ordenesHoy.length}`);
                
                if (ordenesHoy.length > 0) {
                    console.log('üîç √ìrdenes de hoy:');
                    ordenesHoy.forEach((orden, i) => {
                        console.log(`   ${i + 1}. ${orden.numero_orden || orden.id} - ${orden.descripcion}`);
                    });
                }
            }
        } catch (error) {
            console.log('‚ùå Error verificando √≥rdenes:', error.message);
        }
        
        console.log('');
        console.log('üí° CONCLUSI√ìN:');
        console.log('Si todas las condiciones se cumplen pero no se generan √≥rdenes,');
        console.log('el problema podr√≠a estar en:');
        console.log('1. Formato de fecha en la base de datos');
        console.log('2. √ìrdenes existentes bloqueando la generaci√≥n');
        console.log('3. Error en la funci√≥n de asignaci√≥n de t√©cnicos');
        
    } catch (error) {
        console.error('‚ùå Error en diagn√≥stico:', error);
    }
}

diagnosticoLogicaGeneracion();