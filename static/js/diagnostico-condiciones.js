// Script de diagn√≥stico espec√≠fico para condiciones de generaci√≥n
console.log('üîç DIAGN√ìSTICO ESPEC√çFICO - CONDICIONES DE GENERACI√ìN');
console.log('='.repeat(65));

async function diagnosticoCondicionesGeneracion() {
    try {
        const csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content') ||
                         document.querySelector('input[name=csrf_token]')?.value;
        
        console.log('üìã 1. VERIFICANDO DETALLES COMPLETOS DE PLANES...');
        
        // Obtener planes con m√°s detalles
        const planesResponse = await fetch('/planes/api?per_page=100', {
            headers: { 'X-CSRFToken': csrfToken }
        });
        
        const planesData = await planesResponse.json();
        const planes = planesData.planes || planesData.items || [];
        
        const hoy = new Date();
        const hoyStr = '03/10/2025'; // Fecha actual
        
        console.log(`üìÖ Fecha actual: ${hoyStr}`);
        console.log(`üìà Total planes: ${planes.length}`);
        console.log('');
        
        for (let i = 0; i < planes.length; i++) {
            const plan = planes[i];
            const vencido = plan.proxima_ejecucion <= hoyStr || plan.proxima_ejecucion === hoyStr;
            
            console.log(`üìã Plan ${i + 1}: ${plan.codigo} - ${plan.nombre}`);
            console.log(`   ‚úÖ Estado: ${plan.estado}`);
            console.log(`   üìÖ Pr√≥xima ejecuci√≥n: ${plan.proxima_ejecucion}`);
            console.log(`   ‚è∞ ¬øVencido?: ${vencido ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
            
            // Intentar obtener detalles espec√≠ficos del plan
            try {
                const detalleResponse = await fetch(`/planes/api/${plan.id}`, {
                    headers: { 'X-CSRFToken': csrfToken }
                });
                
                if (detalleResponse.ok) {
                    const detalle = await detalleResponse.json();
                    const autoGen = detalle.generacion_automatica;
                    console.log(`   ü§ñ Generaci√≥n autom√°tica: ${autoGen !== undefined ? (autoGen ? 'S√ç ‚úÖ' : 'NO ‚ùå') : 'NO DEFINIDO ‚ùì'}`);
                    
                    // Verificar condiciones completas
                    const cumpleCondiciones = (
                        plan.estado === 'Activo' && 
                        vencido && 
                        autoGen === true
                    );
                    
                    console.log(`   üéØ ¬øDebe generar orden?: ${cumpleCondiciones ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
                    
                    if (!cumpleCondiciones) {
                        console.log('   üö® RAZONES POR LAS QUE NO GENERA:');
                        if (plan.estado !== 'Activo') console.log('      - Estado no es Activo');
                        if (!vencido) console.log('      - No est√° vencido');
                        if (autoGen !== true) console.log('      - Generaci√≥n autom√°tica desactivada');
                    }
                } else {
                    console.log(`   ‚ùå No se pudo obtener detalle (${detalleResponse.status})`);
                }
            } catch (error) {
                console.log(`   ‚ùå Error obteniendo detalle: ${error.message}`);
            }
            
            console.log('');
        }
        
        // 2. Verificar t√©cnicos disponibles
        console.log('üë• 2. VERIFICANDO T√âCNICOS DISPONIBLES...');
        const usuariosResponse = await fetch('/usuarios/api', {
            headers: { 'X-CSRFToken': csrfToken }
        });
        
        if (usuariosResponse.ok) {
            const usuariosData = await usuariosResponse.json();
            const usuarios = usuariosData.usuarios || [];
            
            const tecnicos = usuarios.filter(u => 
                u.rol && (
                    u.rol.toLowerCase().includes('t√©cnico') || 
                    u.rol.toLowerCase().includes('tecnico') ||
                    u.rol.toLowerCase().includes('supervisor')
                )
            );
            
            console.log(`üîß Total t√©cnicos encontrados: ${tecnicos.length}`);
            
            const tecnicosActivos = tecnicos.filter(t => t.activo === true);
            console.log(`‚úÖ T√©cnicos activos: ${tecnicosActivos.length}`);
            
            tecnicos.forEach((t, i) => {
                console.log(`   ${i + 1}. ${t.nombre}`);
                console.log(`      Rol: ${t.rol}`);
                console.log(`      Activo: ${t.activo === true ? 'S√ç ‚úÖ' : t.activo === false ? 'NO ‚ùå' : 'NO DEFINIDO ‚ùì'}`);
                console.log(`      Username: ${t.username || 'No definido'}`);
            });
            
            if (tecnicosActivos.length === 0) {
                console.log('üö® PROBLEMA: No hay t√©cnicos activos para asignar');
            }
        }
        
        console.log('');
        console.log('üí° PR√ìXIMOS PASOS:');
        console.log('1. Si generacion_automatica est√° en false, activarla');
        console.log('2. Si no hay t√©cnicos activos, activar al menos uno');
        console.log('3. Verificar que la fecha de pr√≥xima ejecuci√≥n sea correcta');
        
    } catch (error) {
        console.error('‚ùå Error en diagn√≥stico:', error);
    }
}

diagnosticoCondicionesGeneracion();