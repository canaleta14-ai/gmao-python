"""Script para activar generaci√≥n autom√°tica en un plan y probarlo"""

from app.models.plan_mantenimiento import PlanMantenimiento
from app.extensions import db
from app import create_app
from datetime import datetime, timedelta

# Crear contexto de aplicaci√≥n
app = create_app()
app.app_context().push()

print("=" * 80)
print("CONFIGURANDO PLAN PARA GENERACI√ìN AUTOM√ÅTICA")
print("=" * 80)

# Buscar el plan PM-2025-0003 (que est√° en fecha futura)
plan = PlanMantenimiento.query.filter_by(codigo_plan="PM-2025-0003").first()

if not plan:
    print("‚ùå No se encontr√≥ el plan PM-2025-0003")
    exit(1)

print(f"\nüìã Plan seleccionado: {plan.nombre} ({plan.codigo_plan})")
print(f"   Estado actual: {plan.estado}")
print(f"   Generaci√≥n autom√°tica actual: {plan.generacion_automatica}")
print(f"   Pr√≥xima ejecuci√≥n actual: {plan.proxima_ejecucion}")

# Activar generaci√≥n autom√°tica
plan.generacion_automatica = True

# Ajustar la fecha a ayer para que est√© vencido
ayer = datetime.now() - timedelta(days=1)
plan.proxima_ejecucion = ayer

print(f"\nüîÑ CAMBIOS APLICADOS:")
print(f"   ‚úÖ Generaci√≥n autom√°tica: {plan.generacion_automatica}")
print(f"   ‚úÖ Nueva pr√≥xima ejecuci√≥n: {plan.proxima_ejecucion}")

# Guardar cambios
db.session.commit()

print("\n‚úÖ Plan actualizado exitosamente")

# Verificar que ahora es candidato
ahora = datetime.now()
es_candidato = (
    plan.estado == "Activo"
    and plan.generacion_automatica == True
    and plan.proxima_ejecucion <= ahora
)

print("\n" + "=" * 80)
print("VERIFICACI√ìN")
print("=" * 80)

if es_candidato:
    print(f"‚úÖ El plan '{plan.nombre}' AHORA ES CANDIDATO para generaci√≥n AUTOM√ÅTICA")
    print(f"\nüí° Puedes probar la generaci√≥n autom√°tica:")
    print(f"   1. Ejecuta: python scheduler_simple.py --test")
    print(f"   2. O espera a que se ejecute autom√°ticamente a las 6:00 AM")
    print(f"   3. O ve al calendario: http://localhost:5000/calendario")
else:
    print(f"‚ùå El plan '{plan.nombre}' A√öN NO es candidato")

print("=" * 80)
