# Script de verificaci√≥n del deployment para Windows
# PowerShell version

param(
    [string]$ProjectId = "disfood-gmao",
    [string]$Region = "europe-west1"
)

Write-Host "üîç VERIFICANDO DEPLOYMENT GMAO - DISFOOD ESPA√ëA" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green

$allChecks = @()

# Funci√≥n para registrar checks
function Add-Check {
    param($Name, $Status, $Details = "")
    $script:allChecks += [PSCustomObject]@{
        Name = $Name
        Status = $Status
        Details = $Details
    }
}

# Verificar autenticaci√≥n gcloud
Write-Host "üîë Verificando autenticaci√≥n..." -ForegroundColor Yellow
try {
    $activeAccount = gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>$null
    if ($activeAccount) {
        Add-Check "Autenticaci√≥n gcloud" "‚úÖ" $activeAccount
    } else {
        Add-Check "Autenticaci√≥n gcloud" "‚ùå" "No hay sesi√≥n activa"
    }
} catch {
    Add-Check "Autenticaci√≥n gcloud" "‚ùå" "Error al verificar"
}

# Verificar proyecto configurado
Write-Host "üìã Verificando proyecto..." -ForegroundColor Yellow
try {
    $currentProject = gcloud config get-value project 2>$null
    if ($currentProject -eq $ProjectId) {
        Add-Check "Proyecto configurado" "‚úÖ" $ProjectId
    } else {
        Add-Check "Proyecto configurado" "‚ùå" "Proyecto actual: $currentProject"
    }
} catch {
    Add-Check "Proyecto configurado" "‚ùå" "Error al verificar"
}

# Verificar regi√≥n configurada
Write-Host "üåç Verificando regi√≥n..." -ForegroundColor Yellow
try {
    $currentRegion = gcloud config get-value compute/region 2>$null
    if ($currentRegion -eq $Region) {
        Add-Check "Regi√≥n europea" "‚úÖ" $Region
    } else {
        Add-Check "Regi√≥n europea" "‚ùå" "Regi√≥n actual: $currentRegion"
    }
} catch {
    Add-Check "Regi√≥n europea" "‚ùå" "Error al verificar"
}

# Verificar APIs habilitadas
Write-Host "üîå Verificando APIs..." -ForegroundColor Yellow
$requiredApis = @(
    "appengine.googleapis.com",
    "sqladmin.googleapis.com", 
    "storage.googleapis.com",
    "secretmanager.googleapis.com"
)

foreach ($api in $requiredApis) {
    try {
        $enabled = gcloud services list --enabled --filter="name:$api" --format="value(name)" 2>$null
        if ($enabled) {
            Add-Check "API $api" "‚úÖ" "Habilitada"
        } else {
            Add-Check "API $api" "‚ùå" "No habilitada"
        }
    } catch {
        Add-Check "API $api" "‚ùå" "Error al verificar"
    }
}

# Verificar App Engine
Write-Host "üöÄ Verificando App Engine..." -ForegroundColor Yellow
try {
    $appInfo = gcloud app describe --format="value(locationId)" 2>$null
    if ($appInfo) {
        Add-Check "App Engine" "‚úÖ" "Regi√≥n: $appInfo"
    } else {
        Add-Check "App Engine" "‚ùå" "No configurado"
    }
} catch {
    Add-Check "App Engine" "‚ùå" "Error al verificar"
}

# Verificar Cloud SQL
Write-Host "üóÑÔ∏è Verificando Cloud SQL..." -ForegroundColor Yellow
try {
    $sqlInfo = gcloud sql instances describe gmao-db --format="value(region)" 2>$null
    if ($sqlInfo) {
        Add-Check "Cloud SQL" "‚úÖ" "Regi√≥n: $sqlInfo"
    } else {
        Add-Check "Cloud SQL" "‚ùå" "Instancia no encontrada"
    }
} catch {
    Add-Check "Cloud SQL" "‚ùå" "Error al verificar"
}

# Verificar Storage
Write-Host "üìÅ Verificando Cloud Storage..." -ForegroundColor Yellow
try {
    $bucketInfo = gsutil ls -L -b "gs://disfood-gmao-uploads-eu" 2>$null | Select-String "Location constraint:"
    if ($bucketInfo) {
        Add-Check "Cloud Storage" "‚úÖ" "Bucket configurado"
    } else {
        Add-Check "Cloud Storage" "‚ùå" "Bucket no encontrado"
    }
} catch {
    Add-Check "Cloud Storage" "‚ùå" "Error al verificar"
}

# Verificar secretos
Write-Host "üîê Verificando secretos..." -ForegroundColor Yellow
$requiredSecrets = @("flask-secret-key", "db-password", "admin-password")

foreach ($secret in $requiredSecrets) {
    try {
        $secretExists = gcloud secrets describe $secret --format="value(name)" 2>$null
        if ($secretExists) {
            Add-Check "Secreto $secret" "‚úÖ" "Configurado"
        } else {
            Add-Check "Secreto $secret" "‚ùå" "No encontrado"
        }
    } catch {
        Add-Check "Secreto $secret" "‚ùå" "Error al verificar"
    }
}

# Verificar configuraci√≥n GDPR
Write-Host "üîí Verificando configuraci√≥n GDPR..." -ForegroundColor Yellow

# Verificar variables de entorno GDPR
$gdprVars = @{
    "GDPR_COMPLIANCE" = $env:GDPR_COMPLIANCE
    "GCLOUD_REGION" = $env:GCLOUD_REGION
    "TIMEZONE" = $env:TIMEZONE
    "DATA_RETENTION_YEARS" = $env:DATA_RETENTION_YEARS
}

foreach ($var in $gdprVars.Keys) {
    $value = $gdprVars[$var]
    if ($value) {
        Add-Check "Variable $var" "‚úÖ" $value
    } else {
        Add-Check "Variable $var" "‚ùå" "No configurada"
    }
}

# Verificar archivos de configuraci√≥n
Write-Host "üìã Verificando archivos de configuraci√≥n..." -ForegroundColor Yellow
$requiredFiles = @(
    "app-production.yaml",
    "run_production.py", 
    "config_spain.py",
    "gdpr_compliance.py",
    "GDPR_ESPA√ëA.md"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Add-Check "Archivo $file" "‚úÖ" "Existe"
    } else {
        Add-Check "Archivo $file" "‚ùå" "No encontrado"
    }
}

# Mostrar resumen
Write-Host ""
Write-Host "üìä RESUMEN DE VERIFICACI√ìN" -ForegroundColor Green
Write-Host "==========================" -ForegroundColor Green

$passed = ($allChecks | Where-Object { $_.Status -eq "‚úÖ" }).Count
$failed = ($allChecks | Where-Object { $_.Status -eq "‚ùå" }).Count
$total = $allChecks.Count

Write-Host "‚úÖ Checks pasados: $passed/$total" -ForegroundColor Green
Write-Host "‚ùå Checks fallidos: $failed/$total" -ForegroundColor Red

if ($failed -eq 0) {
    Write-Host ""
    Write-Host "üéâ ¬°DEPLOYMENT VERIFICADO CORRECTAMENTE!" -ForegroundColor Green
    Write-Host "üá™üá∏ Configuraci√≥n Espa√±a: COMPLETA" -ForegroundColor Green
    Write-Host "üîí Cumplimiento GDPR: VERIFICADO" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è ALGUNOS CHECKS FALLARON" -ForegroundColor Yellow
    Write-Host "Revisa los detalles a continuaci√≥n:" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìã DETALLE DE CHECKS:" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan

foreach ($check in $allChecks) {
    $color = if ($check.Status -eq "‚úÖ") { "Green" } else { "Red" }
    Write-Host "$($check.Status) $($check.Name)" -ForegroundColor $color
    if ($check.Details) {
        Write-Host "   ‚îî‚îÄ $($check.Details)" -ForegroundColor Gray
    }
}

# Verificar conectividad si la app est√° desplegada
Write-Host ""
Write-Host "üåê Verificando conectividad..." -ForegroundColor Yellow
try {
    $appUrl = "https://$ProjectId.appspot.com"
    $response = Invoke-WebRequest -Uri $appUrl -Method GET -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Aplicaci√≥n accesible en: $appUrl" -ForegroundColor Green
    Write-Host "   Status: $($response.StatusCode)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Aplicaci√≥n no accesible o no desplegada a√∫n" -ForegroundColor Red
    Write-Host "   URL esperada: https://$ProjectId.appspot.com" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üîó ENLACES √öTILES:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ App Engine: https://console.cloud.google.com/appengine?project=$ProjectId" -ForegroundColor White
Write-Host "   ‚Ä¢ Cloud SQL: https://console.cloud.google.com/sql/instances?project=$ProjectId" -ForegroundColor White
Write-Host "   ‚Ä¢ Storage: https://console.cloud.google.com/storage/browser?project=$ProjectId" -ForegroundColor White
Write-Host "   ‚Ä¢ Logs: https://console.cloud.google.com/logs/query?project=$ProjectId" -ForegroundColor White