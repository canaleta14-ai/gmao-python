"""Script de diagn√≥stico completo para la generaci√≥n autom√°tica de √≥rdenes"""

from app.models.plan_mantenimiento import PlanMantenimiento
from app.models.orden_trabajo import OrdenTrabajo
from app.extensions import db
from app import create_app
from datetime import datetime, timedelta

# Crear contexto de aplicaci√≥n
app = create_app()
app.app_context().push()

print("=" * 80)
print("DIAGN√ìSTICO: GENERACI√ìN AUTOM√ÅTICA DE √ìRDENES PREVENTIVAS")
print("=" * 80)

# 1. Verificar planes existentes
planes = PlanMantenimiento.query.all()
print(f"\nüìã TOTAL DE PLANES: {len(planes)}")
print("-" * 80)

if len(planes) == 0:
    print("‚ùå No hay planes de mantenimiento en la base de datos")
    exit(1)

# 2. Analizar planes para generaci√≥n AUTOM√ÅTICA
ahora = datetime.now()

print(f"üìÖ Fecha/Hora actual: {ahora.strftime('%Y-%m-%d %H:%M:%S')}")
print("-" * 80)

planes_activos = 0
planes_inactivos = 0
planes_con_auto = 0
planes_sin_auto = 0
planes_vencidos = 0
planes_no_vencidos = 0
planes_candidatos_auto = 0

print("\nüîç AN√ÅLISIS DETALLADO DE PLANES:\n")

for plan in planes:
    print(f"üîπ Plan {plan.id}: {plan.nombre}")
    print(f"   C√≥digo: {plan.codigo_plan}")
    print(f"   Estado: {plan.estado}")
    print(f"   Gen. Autom√°tica: {plan.generacion_automatica}")
    print(f"   Pr√≥xima Ejecuci√≥n: {plan.proxima_ejecucion}")
    print(f"   Activo ID: {plan.activo_id}")

    # Estad√≠sticas
    if plan.estado == "Activo":
        planes_activos += 1
    else:
        planes_inactivos += 1

    if plan.generacion_automatica:
        planes_con_auto += 1
    else:
        planes_sin_auto += 1

    # Verificar si est√° vencido (para generaci√≥n AUTOM√ÅTICA)
    if plan.proxima_ejecucion and plan.proxima_ejecucion <= ahora:
        planes_vencidos += 1
        print(f"   ‚è∞ VENCIDO (pr√≥xima ejecuci√≥n <= ahora)")
    else:
        planes_no_vencidos += 1
        print(f"   ‚úÖ NO VENCIDO (pr√≥xima ejecuci√≥n > ahora)")

    # Verificar si es candidato para generaci√≥n AUTOM√ÅTICA
    es_candidato_auto = (
        plan.estado == "Activo"
        and plan.generacion_automatica == True
        and plan.proxima_ejecucion
        and plan.proxima_ejecucion <= ahora
    )

    if es_candidato_auto:
        planes_candidatos_auto += 1
        print(f"   ü§ñ ES CANDIDATO para generaci√≥n AUTOM√ÅTICA")

        # Verificar si ya tiene orden pendiente
        orden_existente = OrdenTrabajo.query.filter(
            OrdenTrabajo.tipo == "Mantenimiento Preventivo",
            OrdenTrabajo.activo_id == plan.activo_id,
            OrdenTrabajo.descripcion.contains(f"Plan: {plan.codigo_plan}"),
            OrdenTrabajo.estado.in_(["Pendiente", "En Proceso"]),
        ).first()

        if orden_existente:
            print(f"   ‚ö†Ô∏è  Ya tiene orden pendiente: {orden_existente.numero_orden}")
            print(f"       Estado: {orden_existente.estado}")
            print(f"       Fecha creaci√≥n: {orden_existente.fecha_creacion}")
        else:
            print(f"   ‚úÖ No tiene orden pendiente - GENERAR√Å ORDEN NUEVA")
    else:
        print(f"   ‚ùå NO es candidato para generaci√≥n AUTOM√ÅTICA")
        if plan.estado != "Activo":
            print(f"      - Raz√≥n: Estado no es Activo ({plan.estado})")
        if not plan.generacion_automatica:
            print(f"      - Raz√≥n: Generaci√≥n autom√°tica desactivada")
        if not plan.proxima_ejecucion or plan.proxima_ejecucion > ahora:
            if plan.proxima_ejecucion:
                diff = plan.proxima_ejecucion - ahora
                dias = diff.days
                horas = diff.seconds // 3600
                print(
                    f"      - Raz√≥n: Falta {dias} d√≠as y {horas} horas para vencimiento"
                )
            else:
                print(f"      - Raz√≥n: No tiene fecha de pr√≥xima ejecuci√≥n")

    print()

print("=" * 80)
print("RESUMEN GENERACI√ìN AUTOM√ÅTICA")
print("=" * 80)
print(f"üìä Total de planes: {len(planes)}")
print(f"   ‚úÖ Activos: {planes_activos}")
print(f"   ‚ùå Inactivos: {planes_inactivos}")
print(f"")
print(f"   ü§ñ CON generaci√≥n autom√°tica: {planes_con_auto}")
print(f"   üë§ SIN generaci√≥n autom√°tica: {planes_sin_auto}")
print(f"")
print(f"   ‚è∞ Vencidos (pr√≥xima <= ahora): {planes_vencidos}")
print(f"   üìÖ No vencidos (pr√≥xima > ahora): {planes_no_vencidos}")
print(f"")
print(f"üéØ CANDIDATOS para generaci√≥n AUTOM√ÅTICA: {planes_candidatos_auto}")

if planes_candidatos_auto == 0:
    print("\n" + "=" * 80)
    print("‚ö†Ô∏è  CONCLUSI√ìN: NO HAY PLANES PARA GENERAR AUTOM√ÅTICAMENTE")
    print("=" * 80)
    print("\nPara que un plan genere √≥rdenes AUTOM√ÅTICAMENTE debe cumplir:")
    print("  1. ‚úÖ Estado = 'Activo'")
    print("  2. ‚úÖ generacion_automatica = True")
    print("  3. ‚úÖ proxima_ejecucion <= fecha_actual")
    print("\nSUGERENCIAS:")
    if planes_con_auto == 0:
        print("  ‚Ä¢ ‚ö†Ô∏è  Ning√∫n plan tiene generaci√≥n autom√°tica activada")
        print("     ‚Üí Edita un plan y marca 'Generaci√≥n Autom√°tica'")
    if planes_vencidos == 0:
        print("  ‚Ä¢ ‚ö†Ô∏è  Ning√∫n plan est√° vencido")
        print("     ‚Üí Espera a que llegue la fecha de 'pr√≥xima_ejecucion'")
        print("     ‚Üí O ajusta manualmente la fecha a una pasada (solo para pruebas)")
    if planes_activos == 0:
        print("  ‚Ä¢ ‚ö†Ô∏è  No hay planes activos")
        print("     ‚Üí Activa al menos un plan de mantenimiento")
else:
    print(
        f"\n‚úÖ Hay {planes_candidatos_auto} plan(es) listo(s) para generar √≥rdenes AUTOM√ÅTICAMENTE"
    )
    print("\nüí° El scheduler autom√°tico (6:00 AM diario) procesar√° estos planes")
    print("   O ejecuta manualmente: python scheduler_simple.py --test")

print("\n" + "=" * 80)
print("VERIFICACI√ìN DEL SCHEDULER")
print("=" * 80)

# Verificar si existe el archivo del scheduler
import os

archivos_scheduler = [
    "scheduler_simple.py",
    "scheduler_apscheduler.py",
    "scheduler_ordenes.py",
]

print("\nüìÅ Archivos de scheduler encontrados:")
for archivo in archivos_scheduler:
    existe = os.path.exists(archivo)
    print(f"   {'‚úÖ' if existe else '‚ùå'} {archivo}")

print("\nüîß Para ejecutar prueba manual:")
print("   python scheduler_simple.py --test")

print("\nüìÖ Para configurar ejecuci√≥n autom√°tica (6:00 AM):")
print("   setup_scheduler_windows.bat (como Administrador)")

print("\nüìä Para ver el calendario de √≥rdenes:")
print("   http://localhost:5000/calendario")

print("=" * 80)
