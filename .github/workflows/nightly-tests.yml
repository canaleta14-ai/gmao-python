name: Tests Nocturnos y Monitoreo

on:
  schedule:
    # Ejecutar todos los días a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Permitir ejecución manual

env:
  PYTHON_VERSION: '3.13'
  FLASK_ENV: testing

jobs:
  comprehensive-tests:
    name: Tests Comprensivos Nocturnos
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gmao_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Configurar variables de entorno
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-nightlies" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/gmao_test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV

    - name: Ejecutar suite completa de tests
      run: |
        python -m pytest tests/ -v --tb=long --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml

    - name: Ejecutar tests de performance
      run: |
        python -m pytest tests/test_integration/ -k "performance" -v --tb=short

    - name: Ejecutar tests de seguridad completos
      run: |
        python -m pytest tests/test_security.py -v --tb=long

    - name: Ejecutar tests de FIFO completos
      run: |
        python -m pytest tests/test_integration/test_fifo_basico.py tests/test_integration/test_fifo_completo.py -v --tb=short

    - name: Generar reporte detallado
      run: |
        echo "# Reporte de Tests Nocturnos - $(date)" > nightly-report.md
        echo "" >> nightly-report.md
        
        echo "## Resumen de Coverage" >> nightly-report.md
        coverage report >> nightly-report.md
        
        echo "" >> nightly-report.md
        echo "## Estado de Tests por Categoría" >> nightly-report.md
        
        echo "### Tests Unitarios" >> nightly-report.md
        python -m pytest tests/test_models/ tests/test_utils/ --tb=no -q >> nightly-report.md 2>&1
        
        echo "" >> nightly-report.md
        echo "### Tests de Controladores" >> nightly-report.md
        python -m pytest tests/test_controllers/ --tb=no -q >> nightly-report.md 2>&1
        
        echo "" >> nightly-report.md
        echo "### Tests de Rutas" >> nightly-report.md
        python -m pytest tests/test_routes/ --tb=no -q >> nightly-report.md 2>&1
        
        echo "" >> nightly-report.md
        echo "### Tests de Integración" >> nightly-report.md
        python -m pytest tests/test_integration/ --tb=no -q >> nightly-report.md 2>&1
        
        echo "" >> nightly-report.md
        echo "### Tests de Seguridad" >> nightly-report.md
        python -m pytest tests/test_security.py --tb=no -q >> nightly-report.md 2>&1

    - name: Archivar reportes nocturnos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-test-reports-${{ github.sha }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml
          nightly-report.md

  production-monitoring:
    name: Monitoreo de Producción
    runs-on: ubuntu-latest
    
    steps:
    - name: Verificar estado de producción
      run: |
        PROD_URL="https://mantenimiento-470311.ew.r.appspot.com"
        
        echo "🔍 Verificando estado de producción..."
        
        # Test de conectividad básica
        if curl -f -s --max-time 10 $PROD_URL > /dev/null; then
          echo "✅ Servidor principal responde correctamente"
        else
          echo "❌ ERROR: Servidor principal no responde"
          exit 1
        fi
        
        # Test de página de login
        if curl -f -s --max-time 10 $PROD_URL/auth/login > /dev/null; then
          echo "✅ Página de login accesible"
        else
          echo "⚠️ WARNING: Página de login no accesible"
        fi
        
        # Test de tiempo de respuesta
        response_time=$(curl -o /dev/null -s -w '%{time_total}' $PROD_URL)
        echo "⏱️ Tiempo de respuesta: ${response_time}s"
        
        # Verificar que el tiempo de respuesta sea razonable (< 5 segundos)
        if (( $(echo "$response_time < 5.0" | bc -l) )); then
          echo "✅ Tiempo de respuesta aceptable"
        else
          echo "⚠️ WARNING: Tiempo de respuesta elevado (${response_time}s)"
        fi

    - name: Verificar certificado SSL
      run: |
        echo "🔒 Verificando certificado SSL..."
        
        ssl_info=$(openssl s_client -connect mantenimiento-470311.ew.r.appspot.com:443 -servername mantenimiento-470311.ew.r.appspot.com </dev/null 2>/dev/null | openssl x509 -noout -dates)
        
        if [ -n "$ssl_info" ]; then
          echo "✅ Certificado SSL válido"
          echo "$ssl_info"
        else
          echo "⚠️ WARNING: No se pudo verificar certificado SSL"
        fi

    - name: Test de endpoints críticos
      run: |
        PROD_URL="https://mantenimiento-470311.ew.r.appspot.com"
        
        echo "🧪 Probando endpoints críticos..."
        
        # Lista de endpoints a verificar (solo GET públicos)
        endpoints=(
          "/"
          "/auth/login"
          "/health"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing: $PROD_URL$endpoint"
          
          status_code=$(curl -o /dev/null -s -w '%{http_code}' --max-time 10 "$PROD_URL$endpoint")
          
          if [[ "$status_code" =~ ^[23] ]]; then
            echo "✅ $endpoint - Status: $status_code"
          else
            echo "⚠️ $endpoint - Status: $status_code"
          fi
        done

  dependency-security-scan:
    name: Escaneo de Seguridad de Dependencias
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Escanear vulnerabilidades en dependencias
      run: |
        echo "🔍 Escaneando vulnerabilidades en dependencias..."
        
        # Escanear requirements.txt
        safety check -r requirements.txt --json > safety-report.json || true
        
        # Escanear requirements-dev.txt  
        safety check -r requirements-dev.txt --json > safety-dev-report.json || true
        
        echo "📊 Reporte de safety generado"

    - name: Análisis de seguridad del código
      run: |
        echo "🔍 Analizando código con bandit..."
        
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt || true
        
        echo "📊 Reporte de bandit generado"

    - name: Archivar reportes de seguridad
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          safety-report.json
          safety-dev-report.json
          bandit-report.json