name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Ejecutar tests con pytest
      run: |
        pytest tests/ \
          --verbose \
          --cov=app \
          --cov-report=xml \
          --cov-report=term \
          --cov-fail-under=25 \
          --tb=short
      continue-on-error: false
    
    - name: Subir reporte de cobertura a Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generar reporte HTML de cobertura
      if: always()
      run: |
        coverage html
    
    - name: Subir reporte HTML como artefacto
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-py${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Instalar dependencias de linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Ejecutar flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      continue-on-error: true
    
    - name: Verificar formato con black
      run: |
        black --check app/
      continue-on-error: true
    
    - name: Verificar imports con isort
      run: |
        isort --check-only app/
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Instalar dependencias de seguridad
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Ejecutar safety (vulnerabilidades en dependencias)
      run: |
        pip install -r requirements.txt
        safety check --json
      continue-on-error: true
    
    - name: Ejecutar bandit (análisis de seguridad)
      run: |
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Subir reporte de seguridad
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    
    steps:
    - name: Verificar estado del build
      run: |
        echo "Test Job: ${{ needs.test.result }}"
        echo "Lint Job: ${{ needs.lint.result }}"
        echo "Security Job: ${{ needs.security.result }}"
        
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests fallaron"
          exit 1
        fi
        
        echo "✅ Pipeline completado exitosamente"
