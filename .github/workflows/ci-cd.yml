name: CI/CD Pipeline GMAO Sistema

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.13'
  FLASK_ENV: testing

jobs:
  test:
    name: Tests y Calidad de Código
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gmao_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache de dependencias pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Configurar variables de entorno para tests
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/gmao_test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV

    - name: Ejecutar tests de seguridad
      run: |
        python -m pytest tests/test_security.py -v --tb=short
      continue-on-error: true

    - name: Ejecutar tests unitarios
      run: |
        python -m pytest tests/test_models/ tests/test_utils/ -v --tb=short --cov=app --cov-report=xml

    - name: Ejecutar tests de controladores
      run: |
        python -m pytest tests/test_controllers/ -v --tb=short --cov=app --cov-append --cov-report=xml

    - name: Ejecutar tests de rutas
      run: |
        python -m pytest tests/test_routes/ -v --tb=short --cov=app --cov-append --cov-report=xml

    - name: Ejecutar tests de integración FIFO
      run: |
        python -m pytest tests/test_integration/test_fifo_basico.py -v --tb=short --cov=app --cov-append --cov-report=xml

    - name: Ejecutar tests completos
      run: |
        python -m pytest tests/ --tb=short --cov=app --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Generar reporte de coverage
      run: |
        coverage report --show-missing
        coverage html

    - name: Subir coverage a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archivar reportes de tests
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          coverage.xml
          pytest-report.html

    - name: Verificar calidad de código
      run: |
        # Verificar que el porcentaje de tests que pasan sea >= 95%
        python -c "
        import subprocess
        import sys
        
        result = subprocess.run(['python', '-m', 'pytest', 'tests/', '--tb=no', '-q'], 
                              capture_output=True, text=True)
        
        output_lines = result.stdout.split('\n')
        summary_line = [line for line in output_lines if 'passed' in line and 'failed' in line]
        
        if summary_line:
            line = summary_line[0]
            if 'passed' in line:
                # Extraer números de la línea de resumen
                import re
                numbers = re.findall(r'\d+', line)
                if len(numbers) >= 2:
                    passed = int(numbers[0])
                    failed = int(numbers[1])
                    total = passed + failed
                    percentage = (passed / total) * 100 if total > 0 else 0
                    
                    print(f'Tests: {passed}/{total} passed ({percentage:.1f}%)')
                    
                    if percentage < 95.0:
                        print(f'ERROR: Test success rate {percentage:.1f}% is below 95% threshold')
                        sys.exit(1)
                    else:
                        print(f'SUCCESS: Test success rate {percentage:.1f}% meets quality gate')
                else:
                    print('Could not parse test numbers')
                    sys.exit(1)
            else:
                print('Could not find test results')
                sys.exit(1)
        else:
            print('Could not find test summary')
            sys.exit(1)
        "

  deploy-staging:
    name: Deploy a Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Deploy a App Engine Staging
      run: |
        # Crear app.yaml para staging
        cp app.yaml app-staging.yaml
        sed -i 's/service: default/service: staging/' app-staging.yaml
        
        gcloud app deploy app-staging.yaml --version=staging-${{ github.sha }} --no-promote --quiet

    - name: Ejecutar tests de smoke en staging
      run: |
        STAGING_URL="https://staging-dot-${{ secrets.GCP_PROJECT_ID }}.ew.r.appspot.com"
        
        # Test básico de conectividad
        curl -f $STAGING_URL || exit 1
        
        # Test de login page
        curl -f $STAGING_URL/auth/login || exit 1
        
        echo "Staging deployment successful: $STAGING_URL"

  deploy-production:
    name: Deploy a Producción
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Verificar tests antes de deploy
      run: |
        echo "Verificando que todos los tests críticos pasen..."
        
        # Aquí podrías ejecutar tests críticos específicos
        # python -m pytest tests/test_security.py tests/test_integration/test_fifo_basico.py -v

    - name: Deploy a App Engine Producción
      run: |
        gcloud app deploy app.yaml --version=prod-${{ github.sha }} --promote --quiet

    - name: Ejecutar tests de smoke en producción
      run: |
        PROD_URL="https://mantenimiento-470311.ew.r.appspot.com"
        
        # Esperar a que el deployment esté listo
        sleep 30
        
        # Test básico de conectividad
        curl -f $PROD_URL || exit 1
        
        # Test de login page
        curl -f $PROD_URL/auth/login || exit 1
        
        echo "Production deployment successful: $PROD_URL"

    - name: Notificar deployment exitoso
      run: |
        echo "🚀 Deployment to production completed successfully!"
        echo "🔗 URL: https://mantenimiento-470311.ew.r.appspot.com"
        echo "📊 Version: prod-${{ github.sha }}"

  cleanup:
    name: Limpieza de Versiones Antiguas
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Configurar Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Limpiar versiones antiguas
      run: |
        # Mantener solo las últimas 5 versiones
        gcloud app versions list --service=default --sort-by='~version.createTime' --format='value(version.id)' | tail -n +6 | xargs --no-run-if-empty gcloud app versions delete --service=default --quiet
        
        # Si existe servicio staging, limpiar también
        if gcloud app services describe staging >/dev/null 2>&1; then
          gcloud app versions list --service=staging --sort-by='~version.createTime' --format='value(version.id)' | tail -n +6 | xargs --no-run-if-empty gcloud app versions delete --service=staging --quiet
        fi