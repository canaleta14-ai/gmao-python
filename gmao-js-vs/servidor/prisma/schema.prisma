// Esquema de base de datos para el Sistema GMAO
// Base de datos: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model Usuario {
  id                    Int                     @id @default(autoincrement())
  nombre                String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(100)
  username              String                  @unique @db.VarChar(50)
  password              String                  @db.VarChar(255)
  rol                   RolUsuario              @default(OPERADOR)
  activo                Boolean                 @default(true)
  fechaCreacion         DateTime                @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime                @updatedAt @map("fecha_actualizacion")
  ultimoAcceso          DateTime?               @map("ultimo_acceso")
  
  // Relaciones
  ordenesCreadas        OrdenTrabajo[]          @relation("OrdenCreadaPor")
  ordenesAsignadas      OrdenTrabajo[]          @relation("OrdenAsignadaA")
  planesResponsable     PlanMantenimiento[]     @relation("PlanResponsable")
  alertasCreadas        Alerta[]                @relation("AlertaCreadaPor")
  movimientosInventario MovimientoInventario[]  @relation("MovimientoPor")
  
  @@map("usuarios")
}

// Enum para roles de usuario
enum RolUsuario {
  ADMIN
  SUPERVISOR
  TECNICO
  OPERADOR
  
  @@map("rol_usuario")
}

// Modelo de Activo
model Activo {
  id                    Int                   @id @default(autoincrement())
  codigo                String                @unique @db.VarChar(50)
  nombre                String                @db.VarChar(100)
  descripcion           String?               @db.Text
  tipo                  String?               @db.VarChar(50)
  marca                 String?               @db.VarChar(100)
  modelo                String?               @db.VarChar(100)
  numeroSerie           String?               @unique @map("numero_serie") @db.VarChar(100)
  ubicacion             String?               @db.VarChar(100)
  estado                EstadoActivo          @default(OPERATIVO)
  prioridad             PrioridadActivo       @default(MEDIA)
  fechaAdquisicion      DateTime?             @map("fecha_adquisicion")
  fechaInstalacion      DateTime?             @map("fecha_instalacion")
  costoAdquisicion      Decimal?              @map("costo_adquisicion") @db.Decimal(10, 2)
  vidaUtilAnos          Int?                  @map("vida_util_anos")
  garantiaMeses         Int?                  @map("garantia_meses")
  proveedor             String?               @db.VarChar(100)
  activo                Boolean               @default(true)
  fechaCreacion         DateTime              @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime              @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  ordenesTrabajo        OrdenTrabajo[]
  planesMantenimiento   PlanMantenimiento[]
  historicoMantenimiento HistoricoMantenimiento[]
  
  @@map("activos")
}

// Enum para estado del activo
enum EstadoActivo {
  OPERATIVO
  MANTENIMIENTO
  FUERA_SERVICIO
  REPARACION
  BAJA
  
  @@map("estado_activo")
}

// Enum para prioridad del activo
enum PrioridadActivo {
  CRITICA
  ALTA
  MEDIA
  BAJA
  
  @@map("prioridad_activo")
}

// Modelo de Orden de Trabajo
model OrdenTrabajo {
  id                    Int                   @id @default(autoincrement())
  numero                String                @unique @db.VarChar(20)
  titulo                String                @db.VarChar(200)
  descripcion           String                @db.Text
  tipo                  TipoOrden             @default(CORRECTIVO)
  prioridad             PrioridadOrden        @default(MEDIA)
  estado                EstadoOrden           @default(PENDIENTE)
  fechaCreacion         DateTime              @default(now()) @map("fecha_creacion")
  fechaVencimiento      DateTime?             @map("fecha_vencimiento")
  fechaInicio           DateTime?             @map("fecha_inicio")
  fechaFinalizacion     DateTime?             @map("fecha_finalizacion")
  tiempoEstimado        Int?                  @map("tiempo_estimado") // en minutos
  tiempoReal            Int?                  @map("tiempo_real") // en minutos
  costoEstimado         Decimal?              @map("costo_estimado") @db.Decimal(10, 2)
  costoReal             Decimal?              @map("costo_real") @db.Decimal(10, 2)
  observaciones         String?               @db.Text
  solucion              String?               @db.Text
  
  // Relaciones
  activoId              Int                   @map("activo_id")
  activo                Activo                @relation(fields: [activoId], references: [id], onDelete: Cascade)
  creadoPorId           Int                   @map("creado_por_id")
  creadoPor             Usuario               @relation("OrdenCreadaPor", fields: [creadoPorId], references: [id])
  asignadoAId           Int?                  @map("asignado_a_id")
  asignadoA             Usuario?              @relation("OrdenAsignadaA", fields: [asignadoAId], references: [id])
  planMantenimientoId   Int?                  @map("plan_mantenimiento_id")
  planMantenimiento     PlanMantenimiento?    @relation(fields: [planMantenimientoId], references: [id])
  
  repuestosUsados       OrdenRepuesto[]
  historicoMantenimiento HistoricoMantenimiento[]
  
  @@map("ordenes_trabajo")
}

// Enum para tipo de orden
enum TipoOrden {
  PREVENTIVO
  CORRECTIVO
  PREDICTIVO
  MEJORA
  
  @@map("tipo_orden")
}

// Enum para prioridad de orden
enum PrioridadOrden {
  CRITICA
  ALTA
  MEDIA
  BAJA
  
  @@map("prioridad_orden")
}

// Enum para estado de orden
enum EstadoOrden {
  PENDIENTE
  EN_PROGRESO
  PAUSADA
  COMPLETADA
  CANCELADA
  
  @@map("estado_orden")
}

// Modelo de Plan de Mantenimiento
model PlanMantenimiento {
  id                    Int                   @id @default(autoincrement())
  nombre                String                @db.VarChar(100)
  descripcion           String?               @db.Text
  tipo                  TipoMantenimiento     @default(PREVENTIVO)
  frecuencia            Int                   // en d√≠as
  duracionEstimada      Int?                  @map("duracion_estimada") // en minutos
  estado                EstadoPlan            @default(ACTIVO)
  fechaInicio           DateTime              @map("fecha_inicio")
  fechaProximaEjecucion DateTime?             @map("fecha_proxima_ejecucion")
  tareas                String?               @db.Text
  observaciones         String?               @db.Text
  fechaCreacion         DateTime              @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime              @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  activoId              Int                   @map("activo_id")
  activo                Activo                @relation(fields: [activoId], references: [id], onDelete: Cascade)
  responsableId         Int?                  @map("responsable_id")
  responsable           Usuario?              @relation("PlanResponsable", fields: [responsableId], references: [id])
  
  ordenesTrabajo        OrdenTrabajo[]
  
  @@map("planes_mantenimiento")
}

// Enum para tipo de mantenimiento
enum TipoMantenimiento {
  PREVENTIVO
  PREDICTIVO
  CORRECTIVO
  
  @@map("tipo_mantenimiento")
}

// Enum para estado del plan
enum EstadoPlan {
  ACTIVO
  INACTIVO
  SUSPENDIDO
  
  @@map("estado_plan")
}

// Modelo de Inventario
model Inventario {
  id                    Int                     @id @default(autoincrement())
  codigo                String                  @unique @db.VarChar(50)
  nombre                String                  @db.VarChar(100)
  descripcion           String?                 @db.Text
  categoria             String?                 @db.VarChar(50)
  unidadMedida          String                  @map("unidad_medida") @db.VarChar(20)
  cantidadActual        Int                     @map("cantidad_actual") @default(0)
  cantidadMinima        Int                     @map("cantidad_minima") @default(0)
  cantidadMaxima        Int?                    @map("cantidad_maxima")
  precio                Decimal?                @db.Decimal(10, 2)
  ubicacion             String?                 @db.VarChar(100)
  proveedorPrincipal    String?                 @map("proveedor_principal") @db.VarChar(100)
  activo                Boolean                 @default(true)
  fechaCreacion         DateTime                @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime                @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  movimientos           MovimientoInventario[]
  ordenesRepuestos      OrdenRepuesto[]
  
  @@map("inventario")
}

// Modelo de Movimiento de Inventario
model MovimientoInventario {
  id                    Int                   @id @default(autoincrement())
  tipo                  TipoMovimiento
  cantidad              Int
  cantidadAnterior      Int                   @map("cantidad_anterior")
  cantidadNueva         Int                   @map("cantidad_nueva")
  precio                Decimal?              @db.Decimal(10, 2)
  motivo                String?               @db.VarChar(200)
  numeroDocumento       String?               @map("numero_documento") @db.VarChar(50)
  fechaMovimiento       DateTime              @default(now()) @map("fecha_movimiento")
  
  // Relaciones
  inventarioId          Int                   @map("inventario_id")
  inventario            Inventario            @relation(fields: [inventarioId], references: [id], onDelete: Cascade)
  usuarioId             Int                   @map("usuario_id")
  usuario               Usuario               @relation("MovimientoPor", fields: [usuarioId], references: [id])
  
  @@map("movimientos_inventario")
}

// Enum para tipo de movimiento
enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
  TRANSFERENCIA
  
  @@map("tipo_movimiento")
}

// Modelo de relaci√≥n Orden-Repuesto
model OrdenRepuesto {
  id                    Int                   @id @default(autoincrement())
  cantidad              Int
  costoUnitario         Decimal?              @map("costo_unitario") @db.Decimal(10, 2)
  costoTotal            Decimal?              @map("costo_total") @db.Decimal(10, 2)
  
  // Relaciones
  ordenId               Int                   @map("orden_id")
  orden                 OrdenTrabajo          @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  inventarioId          Int                   @map("inventario_id")
  inventario            Inventario            @relation(fields: [inventarioId], references: [id])
  
  @@map("orden_repuestos")
}

// Modelo de Proveedor
model Proveedor {
  id                    Int                   @id @default(autoincrement())
  codigo                String                @unique @db.VarChar(20)
  nombre                String                @db.VarChar(100)
  contacto              String?               @db.VarChar(100)
  telefono              String?               @db.VarChar(20)
  email                 String?               @db.VarChar(100)
  direccion             String?               @db.Text
  ciudad                String?               @db.VarChar(50)
  pais                  String?               @db.VarChar(50)
  codigoPostal          String?               @map("codigo_postal") @db.VarChar(10)
  sitioWeb              String?               @map("sitio_web") @db.VarChar(200)
  tiempoEntrega         Int?                  @map("tiempo_entrega") // en d√≠as
  calificacion          Decimal?              @db.Decimal(3, 2) // de 0.00 a 5.00
  observaciones         String?               @db.Text
  activo                Boolean               @default(true)
  fechaCreacion         DateTime              @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime              @updatedAt @map("fecha_actualizacion")
  
  @@map("proveedores")
}

// Modelo de Alerta
model Alerta {
  id                    Int                   @id @default(autoincrement())
  tipo                  TipoAlerta
  titulo                String                @db.VarChar(200)
  mensaje               String                @db.Text
  nivel                 NivelAlerta           @default(INFO)
  estado                EstadoAlerta          @default(ACTIVA)
  fechaCreacion         DateTime              @default(now()) @map("fecha_creacion")
  fechaVencimiento      DateTime?             @map("fecha_vencimiento")
  fechaLeida            DateTime?             @map("fecha_leida")
  datos                 Json?                 // Datos adicionales en formato JSON
  
  // Relaciones
  creadoPorId           Int                   @map("creado_por_id")
  creadoPor             Usuario               @relation("AlertaCreadaPor", fields: [creadoPorId], references: [id])
  
  @@map("alertas")
}

// Enum para tipo de alerta
enum TipoAlerta {
  MANTENIMIENTO_VENCIDO
  STOCK_BAJO
  ORDEN_VENCIDA
  ACTIVO_CRITICO
  SISTEMA
  
  @@map("tipo_alerta")
}

// Enum para nivel de alerta
enum NivelAlerta {
  CRITICO
  ALTO
  MEDIO
  INFO
  
  @@map("nivel_alerta")
}

// Enum para estado de alerta
enum EstadoAlerta {
  ACTIVA
  LEIDA
  ARCHIVADA
  
  @@map("estado_alerta")
}

// Modelo de Hist√≥rico de Mantenimiento
model HistoricoMantenimiento {
  id                    Int                   @id @default(autoincrement())
  fecha                 DateTime              @default(now())
  tipo                  TipoMantenimiento
  descripcion           String                @db.Text
  costo                 Decimal?              @db.Decimal(10, 2)
  tiempoEmpleado        Int?                  @map("tiempo_empleado") // en minutos
  observaciones         String?               @db.Text
  
  // Relaciones
  activoId              Int                   @map("activo_id")
  activo                Activo                @relation(fields: [activoId], references: [id], onDelete: Cascade)
  ordenTrabajoId        Int?                  @map("orden_trabajo_id")
  ordenTrabajo          OrdenTrabajo?         @relation(fields: [ordenTrabajoId], references: [id])
  
  @@map("historico_mantenimiento")
}